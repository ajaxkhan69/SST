ARM GAS  /tmp/ccWowvEN.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32l4xx_hal_rcc.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.HAL_RCC_DeInit,"ax",%progbits
  18              		.align	1
  19              		.global	HAL_RCC_DeInit
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	HAL_RCC_DeInit:
  26              	.LFB126:
  27              		.file 1 "Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c"
   1:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** /**
   2:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   ******************************************************************************
   3:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   * @file    stm32l4xx_hal_rcc.c
   4:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   * @author  MCD Application Team
   5:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   * @version V1.5.2
   6:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   * @date    12-September-2016
   7:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   * @brief   RCC HAL module driver.
   8:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   *          This file provides firmware functions to manage the following
   9:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   *          functionalities of the Reset and Clock Control (RCC) peripheral:
  10:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   *           + Initialization and de-initialization functions
  11:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   *           + Peripheral Control functions
  12:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   *
  13:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   @verbatim
  14:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   ==============================================================================
  15:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****                       ##### RCC specific features #####
  16:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   ==============================================================================
  17:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     [..]
  18:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       After reset the device is running from Multiple Speed Internal oscillator
  19:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       (4 MHz) with Flash 0 wait state. Flash prefetch buffer, D-Cache
  20:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       and I-Cache are disabled, and all peripherals are off except internal
  21:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       SRAM, Flash and JTAG.
  22:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
  23:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       (+) There is no prescaler on High speed (AHBs) and Low speed (APBs) busses:
  24:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****           all peripherals mapped on these busses are running at MSI speed.
  25:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       (+) The clock for all peripherals is switched off, except the SRAM and FLASH.
  26:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       (+) All GPIOs are in analog mode, except the JTAG pins which
  27:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****           are assigned to be used for debug purpose.
  28:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
  29:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     [..]
  30:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       Once the device started from reset, the user application has to:
  31:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       (+) Configure the clock source to be used to drive the System clock
ARM GAS  /tmp/ccWowvEN.s 			page 2


  32:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****           (if the application needs higher frequency/performance)
  33:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       (+) Configure the System clock frequency and Flash settings
  34:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       (+) Configure the AHB and APB busses prescalers
  35:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       (+) Enable the clock for the peripheral(s) to be used
  36:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       (+) Configure the clock source(s) for peripherals which clocks are not
  37:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****           derived from the System clock (SAIx, RTC, ADC, USB OTG FS/SDMMC1/RNG)
  38:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
  39:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   @endverbatim
  40:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   ******************************************************************************
  41:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   * @attention
  42:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   *
  43:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   * <h2><center>&copy; COPYRIGHT(c) 2016 STMicroelectronics</center></h2>
  44:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   *
  45:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   * Redistribution and use in source and binary forms, with or without modification,
  46:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   * are permitted provided that the following conditions are met:
  47:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  48:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   *      this list of conditions and the following disclaimer.
  49:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  50:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   *      this list of conditions and the following disclaimer in the documentation
  51:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   *      and/or other materials provided with the distribution.
  52:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  53:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   *      may be used to endorse or promote products derived from this software
  54:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   *      without specific prior written permission.
  55:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   *
  56:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  57:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  58:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  59:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  60:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  61:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  62:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  63:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  64:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  65:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  66:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   *
  67:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   ******************************************************************************
  68:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   */
  69:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
  70:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** /* Includes ------------------------------------------------------------------*/
  71:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** #include "stm32l4xx_hal.h"
  72:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
  73:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** /** @addtogroup STM32L4xx_HAL_Driver
  74:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   * @{
  75:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   */
  76:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
  77:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** /** @defgroup RCC RCC
  78:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   * @brief RCC HAL module driver
  79:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   * @{
  80:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   */
  81:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
  82:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** #ifdef HAL_RCC_MODULE_ENABLED
  83:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
  84:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** /* Private typedef -----------------------------------------------------------*/
  85:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** /* Private define ------------------------------------------------------------*/
  86:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** /** @defgroup RCC_Private_Constants RCC Private Constants
  87:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****  * @{
  88:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****  */
ARM GAS  /tmp/ccWowvEN.s 			page 3


  89:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** #define HSE_TIMEOUT_VALUE          HSE_STARTUP_TIMEOUT
  90:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** #define HSI_TIMEOUT_VALUE          ((uint32_t)2U)    /* 2 ms (minimum Tick + 1) */
  91:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** #define MSI_TIMEOUT_VALUE          ((uint32_t)2U)    /* 2 ms (minimum Tick + 1) */  
  92:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** #define LSI_TIMEOUT_VALUE          ((uint32_t)2U)    /* 2 ms (minimum Tick + 1) */
  93:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** #define HSI48_TIMEOUT_VALUE        ((uint32_t)2U)    /* 2 ms (minimum Tick + 1) */
  94:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** #define PLL_TIMEOUT_VALUE          ((uint32_t)2U)    /* 2 ms (minimum Tick + 1) */
  95:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** #define CLOCKSWITCH_TIMEOUT_VALUE  ((uint32_t)5000U) /* 5 s    */
  96:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** /**
  97:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   * @}
  98:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   */
  99:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
 100:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** /* Private macro -------------------------------------------------------------*/
 101:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** /** @defgroup RCC_Private_Macros RCC Private Macros
 102:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   * @{
 103:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   */
 104:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** #define __MCO1_CLK_ENABLE()   __HAL_RCC_GPIOA_CLK_ENABLE()
 105:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** #define MCO1_GPIO_PORT        GPIOA
 106:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** #define MCO1_PIN              GPIO_PIN_8
 107:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
 108:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** #define RCC_PLL_OSCSOURCE_CONFIG(__HAL_RCC_PLLSOURCE__) \
 109:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****             (MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, (uint32_t)(__HAL_RCC_PLLSOURCE__)))
 110:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** /**
 111:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   * @}
 112:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   */
 113:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
 114:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** /* Private variables ---------------------------------------------------------*/
 115:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** /** @defgroup RCC_Private_Variables RCC Private Variables
 116:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   * @{
 117:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   */
 118:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
 119:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** /**
 120:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   * @}
 121:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   */
 122:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
 123:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** /* Private function prototypes -----------------------------------------------*/
 124:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** /** @defgroup RCC_Private_Functions RCC Private Functions
 125:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   * @{
 126:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   */
 127:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange);
 128:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** /**
 129:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   * @}
 130:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   */
 131:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
 132:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** /* Exported functions --------------------------------------------------------*/
 133:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
 134:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** /** @defgroup RCC_Exported_Functions RCC Exported Functions
 135:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   * @{
 136:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   */
 137:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
 138:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** /** @defgroup RCC_Exported_Functions_Group1 Initialization and de-initialization functions
 139:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   *  @brief    Initialization and Configuration functions
 140:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   *
 141:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   @verbatim
 142:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****  ===============================================================================
 143:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****            ##### Initialization and de-initialization functions #####
 144:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****  ===============================================================================
 145:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     [..]
ARM GAS  /tmp/ccWowvEN.s 			page 4


 146:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       This section provides functions allowing to configure the internal and external oscillators
 147:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       (HSE, HSI, LSE, MSI, LSI, PLL, CSS and MCO) and the System busses clocks (SYSCLK, AHB, APB1
 148:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****        and APB2).
 149:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
 150:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     [..] Internal/external clock and PLL configuration
 151:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****          (+) HSI (high-speed internal): 16 MHz factory-trimmed RC used directly or through
 152:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****              the PLL as System clock source.
 153:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****              
 154:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****          (+) MSI (Mutiple Speed Internal): Its frequency is software trimmable from 100KHZ to 48MHZ
 155:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****              It can be used to generate the clock for the USB OTG FS (48 MHz).
 156:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****              The number of flash wait states is automatically adjusted when MSI range is updated wi
 157:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****              HAL_RCC_OscConfig() and the MSI is used as System clock source. 
 158:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
 159:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****          (+) LSI (low-speed internal): 32 KHz low consumption RC used as IWDG and/or RTC
 160:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****              clock source.
 161:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
 162:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****          (+) HSE (high-speed external): 4 to 48 MHz crystal oscillator used directly or
 163:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****              through the PLL as System clock source. Can be used also optionally as RTC clock sourc
 164:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
 165:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****          (+) LSE (low-speed external): 32.768 KHz oscillator used optionally as RTC clock source.
 166:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
 167:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****          (+) PLL (clocked by HSI, HSE or MSI) providing up to three independent output clocks:
 168:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****            (++) The first output is used to generate the high speed system clock (up to 80MHz).
 169:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****            (++) The second output is used to generate the clock for the USB OTG FS (48 MHz),
 170:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****                 the random analog generator (<=48 MHz) and the SDMMC1 (<= 48 MHz).
 171:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****            (++) The third output is used to generate an accurate clock to achieve
 172:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****                 high-quality audio performance on SAI interface.
 173:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
 174:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****          (+) PLLSAI1 (clocked by HSI, HSE or MSI) providing up to three independent output clocks:
 175:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****            (++) The first output is used to generate SAR ADC1 clock.
 176:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****            (++) The second output is used to generate the clock for the USB OTG FS (48 MHz),
 177:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****                 the random analog generator (<=48 MHz) and the SDMMC1 (<= 48 MHz).
 178:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****            (++) The Third output is used to generate an accurate clock to achieve
 179:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****                 high-quality audio performance on SAI interface.
 180:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
 181:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****          (+) PLLSAI2 (clocked by HSI , HSE or MSI) providing up to two independent output clocks:
 182:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****            (++) The first output is used to generate SAR ADC2 clock.
 183:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****            (++) The second  output is used to generate an accurate clock to achieve
 184:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****                 high-quality audio performance on SAI interface.
 185:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
 186:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****          (+) CSS (Clock security system): once enabled, if a HSE clock failure occurs
 187:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****             (HSE used directly or through PLL as System clock source), the System clock
 188:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****              is automatically switched to HSI and an interrupt is generated if enabled.
 189:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****              The interrupt is linked to the Cortex-M4 NMI (Non-Maskable Interrupt)
 190:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****              exception vector.
 191:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
 192:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****          (+) MCO (microcontroller clock output): used to output MSI, LSI, HSI, LSE, HSE or
 193:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****              main PLL clock (through a configurable prescaler) on PA8 pin.
 194:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
 195:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     [..] System, AHB and APB busses clocks configuration
 196:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****          (+) Several clock sources can be used to drive the System clock (SYSCLK): MSI, HSI,
 197:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****              HSE and main PLL.
 198:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****              The AHB clock (HCLK) is derived from System clock through configurable
 199:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****              prescaler and used to clock the CPU, memory and peripherals mapped
 200:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****              on AHB bus (DMA, GPIO...). APB1 (PCLK1) and APB2 (PCLK2) clocks are derived
 201:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****              from AHB clock through configurable prescalers and used to clock
 202:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****              the peripherals mapped on these busses. You can use
ARM GAS  /tmp/ccWowvEN.s 			page 5


 203:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****              "HAL_RCC_GetSysClockFreq()" function to retrieve the frequencies of these clocks.
 204:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
 205:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****          -@- All the peripheral clocks are derived from the System clock (SYSCLK) except:
 206:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
 207:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****            (+@) SAI: the SAI clock can be derived either from a specific PLL (PLLSAI1) or (PLLSAI2)
 208:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****                 from an external clock mapped on the SAI_CKIN pin.
 209:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****                 You have to use HAL_RCCEx_PeriphCLKConfig() function to configure this clock.
 210:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****            (+@) RTC: the RTC clock can be derived either from the LSI, LSE or HSE clock
 211:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****                 divided by 2 to 31.
 212:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****                 You have to use __HAL_RCC_RTC_ENABLE() and HAL_RCCEx_PeriphCLKConfig() function
 213:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****                 to configure this clock.
 214:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****            (+@) USB OTG FS, SDMMC1 and RNG: USB OTG FS requires a frequency equal to 48 MHz
 215:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****                 to work correctly, while the SDMMC1 and RNG peripherals require a frequency 
 216:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****                 equal or lower than to 48 MHz. This clock is derived of the main PLL or PLLSAI1
 217:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****                 through PLLQ divider. You have to enable the peripheral clock and use 
 218:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****                 HAL_RCCEx_PeriphCLKConfig() function to configure this clock.
 219:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****            (+@) IWDG clock which is always the LSI clock.
 220:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
 221:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
 222:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****          (+) The maximum frequency of the SYSCLK, HCLK, PCLK1 and PCLK2 is 80 MHz. 
 223:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****              The clock source frequency should be adapted depending on the device voltage range
 224:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****              as listed in the Reference Manual "Clock source frequency versus voltage scaling" chap
 225:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
 226:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   @endverbatim
 227:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****              
 228:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****            Table 1. HCLK clock frequency.             
 229:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****            +-------------------------------------------------------+     
 230:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****            | Latency         |    HCLK clock frequency (MHz)       |
 231:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****            |                 |-------------------------------------|     
 232:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****            |                 | voltage range 1  | voltage range 2  |
 233:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****            |                 |      1.2 V       |     1.0 V        |
 234:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****            |-----------------|------------------|------------------|          
 235:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****            |0WS(1 CPU cycles)|  0 < HCLK <= 16  |  0 < HCLK <= 6   |
 236:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****            |-----------------|------------------|------------------|
 237:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****            |1WS(2 CPU cycles)| 16 < HCLK <= 32  |  6 < HCLK <= 12  |
 238:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****            |-----------------|------------------|------------------|
 239:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****            |2WS(3 CPU cycles)| 32 < HCLK <= 48  | 12 < HCLK <= 18  |
 240:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****            |-----------------|------------------|------------------|
 241:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****            |3WS(4 CPU cycles)| 48 < HCLK <= 64  | 18 < HCLK <= 26  |
 242:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****            |-----------------|------------------|------------------|
 243:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****            |4WS(5 CPU cycles)| 64 < HCLK <= 80  | 18 < HCLK <= 26  |
 244:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****            +-------------------------------------------------------+   
 245:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   * @{
 246:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   */
 247:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
 248:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** /**
 249:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   * @brief  Reset the RCC clock configuration to the default reset state.
 250:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   * @note   The default reset state of the clock configuration is given below:
 251:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   *            - MSI ON and used as system clock source
 252:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   *            - HSE, HSI, PLL, PLLSAI1 and PLLISAI2 OFF
 253:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   *            - AHB, APB1 and APB2 prescaler set to 1.
 254:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   *            - CSS, MCO1 OFF
 255:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   *            - All interrupts disabled
 256:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   * @note   This function doesn't modify the configuration of the
 257:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   *            - Peripheral clocks
 258:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   *            - LSI, LSE and RTC clocks
 259:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   * @retval None
ARM GAS  /tmp/ccWowvEN.s 			page 6


 260:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   */
 261:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** void HAL_RCC_DeInit(void)
 262:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** {
  28              		.loc 1 262 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 1, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33 0000 80B4     		push	{r7}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 4
  36              		.cfi_offset 7, -4
  37 0002 00AF     		add	r7, sp, #0
  38              	.LCFI1:
  39              		.cfi_def_cfa_register 7
 263:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   /* Set MSION bit */
 264:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   SET_BIT(RCC->CR, RCC_CR_MSION);
  40              		.loc 1 264 0
  41 0004 254A     		ldr	r2, .L4
  42 0006 254B     		ldr	r3, .L4
  43 0008 1B68     		ldr	r3, [r3]
  44 000a 43F00103 		orr	r3, r3, #1
  45 000e 1360     		str	r3, [r2]
 265:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
 266:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   /* Insure MSIRDY bit is set before writing default MSIRANGE value */
 267:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET) { __NOP(); }
  46              		.loc 1 267 0
  47 0010 00E0     		b	.L2
  48              	.L3:
  49              	.LBB44:
  50              	.LBB45:
  51              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V4.30
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     20. October 2015
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:Drivers/CMSIS/Include/cmsis_gcc.h **** 
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****    All rights reserved.
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****    Redistribution and use in source and binary forms, with or without
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****    modification, are permitted provided that the following conditions are met:
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions of source code must retain the above copyright
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions in binary form must reproduce the above copyright
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer in the
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****      documentation and/or other materials provided with the distribution.
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****      to endorse or promote products derived from this software without
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****      specific prior written permission.
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****    *
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:Drivers/CMSIS/Include/cmsis_gcc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:Drivers/CMSIS/Include/cmsis_gcc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
ARM GAS  /tmp/ccWowvEN.s 			page 7


  26:Drivers/CMSIS/Include/cmsis_gcc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:Drivers/CMSIS/Include/cmsis_gcc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:Drivers/CMSIS/Include/cmsis_gcc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:Drivers/CMSIS/Include/cmsis_gcc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:Drivers/CMSIS/Include/cmsis_gcc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:Drivers/CMSIS/Include/cmsis_gcc.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:Drivers/CMSIS/Include/cmsis_gcc.h ****    ---------------------------------------------------------------------------*/
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  36:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined ( __GNUC__ )
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  41:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  44:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  47:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  49:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
  51:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  53:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  54:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  55:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  57:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
  59:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  60:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  62:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  66:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  67:Drivers/CMSIS/Include/cmsis_gcc.h ****   Can only be executed in Privileged modes.
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  72:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  73:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  74:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  75:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
  77:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
  78:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  80:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
  81:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
ARM GAS  /tmp/ccWowvEN.s 			page 8


  83:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
  85:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  87:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  88:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  89:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
  93:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
  95:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
  97:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  98:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  99:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 100:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 101:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 102:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 105:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 106:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 108:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 109:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 110:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 111:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 114:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 115:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 116:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 118:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 123:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 124:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 125:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 126:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 127:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 128:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 129:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 132:Drivers/CMSIS/Include/cmsis_gcc.h ****     \return               xPSR Register value
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 137:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
ARM GAS  /tmp/ccWowvEN.s 			page 9


 140:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 142:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 143:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 145:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 148:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 149:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 150:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 151:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 154:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 155:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 163:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 164:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 169:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 170:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 171:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 172:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 175:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 178:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 183:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 184:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 186:Drivers/CMSIS/Include/cmsis_gcc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 187:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 190:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 195:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 196:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
ARM GAS  /tmp/ccWowvEN.s 			page 10


 197:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 198:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 200:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 201:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 203:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 204:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 207:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 208:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 209:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 210:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 211:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 213:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 215:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 222:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 223:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 224:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 226:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_fault_irq(void)
 227:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 228:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 231:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 232:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 234:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 235:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 236:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_fault_irq(void)
 238:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 240:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 241:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 244:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 245:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 248:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 250:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
ARM GAS  /tmp/ccWowvEN.s 			page 11


 254:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 255:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 256:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 257:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 258:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 259:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 261:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 264:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 265:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 266:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 267:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 268:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 269:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 270:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 272:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 273:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 274:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI_MAX(uint32_t value)
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (value) : "memory");
 277:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 278:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 279:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 281:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 283:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 284:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 288:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 291:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 296:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 298:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 299:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 300:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 301:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M >= 0x03U) */
 305:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 306:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 307:Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U)
 308:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 309:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
ARM GAS  /tmp/ccWowvEN.s 			page 12


 311:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 312:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FPSCR(void)
 315:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 316:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 317:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 320:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 324:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(0);
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 329:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 332:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 338:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 339:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc");
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 342:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 343:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 344:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 345:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U) */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 348:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 349:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 350:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 351:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 352:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 353:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 354:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 355:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 358:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 361:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 362:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 363:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  /tmp/ccWowvEN.s 			page 13


 368:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 369:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("nop");
  52              		.loc 2 375 0 discriminator 2
  53              		.syntax unified
  54              	@ 375 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
  55 0012 00BF     		nop
  56              	@ 0 "" 2
  57              		.thumb
  58              		.syntax unified
  59              	.L2:
  60              	.LBE45:
  61              	.LBE44:
  62              		.loc 1 267 0 discriminator 1
  63 0014 214B     		ldr	r3, .L4
  64 0016 1B68     		ldr	r3, [r3]
  65 0018 03F00203 		and	r3, r3, #2
  66 001c 002B     		cmp	r3, #0
  67 001e F8D0     		beq	.L3
 268:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   
 269:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   /* Set MSIRANGE default value */
 270:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, RCC_MSIRANGE_6);
  68              		.loc 1 270 0
  69 0020 1E4A     		ldr	r2, .L4
  70 0022 1E4B     		ldr	r3, .L4
  71 0024 1B68     		ldr	r3, [r3]
  72 0026 23F0F003 		bic	r3, r3, #240
  73 002a 43F06003 		orr	r3, r3, #96
  74 002e 1360     		str	r3, [r2]
 271:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   
 272:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   /* Reset CFGR register (MSI is selected as system clock source) */
 273:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   CLEAR_REG(RCC->CFGR);
  75              		.loc 1 273 0
  76 0030 1A4B     		ldr	r3, .L4
  77 0032 0022     		movs	r2, #0
  78 0034 9A60     		str	r2, [r3, #8]
 274:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
 275:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   /* Reset HSION, HSIKERON, HSIASFS, HSEON, HSECSSON, PLLON, PLLSAIxON bits */
 276:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** #if defined(RCC_PLLSAI2_SUPPORT)
 277:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   
 278:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSION | RCC_CR_HSIKERON| RCC_CR_HSIASFS | RCC_CR_PLLON |
  79              		.loc 1 278 0
  80 0036 1949     		ldr	r1, .L4
  81 0038 184B     		ldr	r3, .L4
  82 003a 1A68     		ldr	r2, [r3]
  83 003c 184B     		ldr	r3, .L4+4
  84 003e 1340     		ands	r3, r3, r2
  85 0040 0B60     		str	r3, [r1]
 279:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
 280:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** #else
 281:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
 282:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSION | RCC_CR_HSIKERON| RCC_CR_HSIASFS | RCC_CR_PLLON |
ARM GAS  /tmp/ccWowvEN.s 			page 14


 283:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
 284:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** #endif /* RCC_PLLSAI2_SUPPORT */
 285:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   
 286:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   /* Reset PLLCFGR register */
 287:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   CLEAR_REG(RCC->PLLCFGR);
  86              		.loc 1 287 0
  87 0042 164B     		ldr	r3, .L4
  88 0044 0022     		movs	r2, #0
  89 0046 DA60     		str	r2, [r3, #12]
 288:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN_4 );
  90              		.loc 1 288 0
  91 0048 144A     		ldr	r2, .L4
  92 004a 144B     		ldr	r3, .L4
  93 004c DB68     		ldr	r3, [r3, #12]
  94 004e 43F48053 		orr	r3, r3, #4096
  95 0052 D360     		str	r3, [r2, #12]
 289:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
 290:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   /* Reset PLLSAI1CFGR register */
 291:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   CLEAR_REG(RCC->PLLSAI1CFGR);
  96              		.loc 1 291 0
  97 0054 114B     		ldr	r3, .L4
  98 0056 0022     		movs	r2, #0
  99 0058 1A61     		str	r2, [r3, #16]
 292:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   SET_BIT(RCC->PLLSAI1CFGR,  RCC_PLLSAI1CFGR_PLLSAI1N_4 );
 100              		.loc 1 292 0
 101 005a 104A     		ldr	r2, .L4
 102 005c 0F4B     		ldr	r3, .L4
 103 005e 1B69     		ldr	r3, [r3, #16]
 104 0060 43F48053 		orr	r3, r3, #4096
 105 0064 1361     		str	r3, [r2, #16]
 293:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
 294:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** #if defined(RCC_PLLSAI2_SUPPORT)
 295:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   
 296:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   /* Reset PLLSAI2CFGR register */
 297:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   CLEAR_REG(RCC->PLLSAI2CFGR);
 106              		.loc 1 297 0
 107 0066 0D4B     		ldr	r3, .L4
 108 0068 0022     		movs	r2, #0
 109 006a 5A61     		str	r2, [r3, #20]
 298:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   SET_BIT(RCC->PLLSAI2CFGR,  RCC_PLLSAI2CFGR_PLLSAI2N_4 );
 110              		.loc 1 298 0
 111 006c 0B4A     		ldr	r2, .L4
 112 006e 0B4B     		ldr	r3, .L4
 113 0070 5B69     		ldr	r3, [r3, #20]
 114 0072 43F48053 		orr	r3, r3, #4096
 115 0076 5361     		str	r3, [r2, #20]
 299:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   
 300:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** #endif /* RCC_PLLSAI2_SUPPORT */
 301:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
 302:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   /* Reset HSEBYP bit */
 303:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 116              		.loc 1 303 0
 117 0078 084A     		ldr	r2, .L4
 118 007a 084B     		ldr	r3, .L4
 119 007c 1B68     		ldr	r3, [r3]
 120 007e 23F48023 		bic	r3, r3, #262144
 121 0082 1360     		str	r3, [r2]
ARM GAS  /tmp/ccWowvEN.s 			page 15


 304:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
 305:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   /* Disable all interrupts */
 306:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   CLEAR_REG(RCC->CIER);
 122              		.loc 1 306 0
 123 0084 054B     		ldr	r3, .L4
 124 0086 0022     		movs	r2, #0
 125 0088 9A61     		str	r2, [r3, #24]
 307:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
 308:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   /* Update the SystemCoreClock global variable */
 309:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   SystemCoreClock = MSI_VALUE;
 126              		.loc 1 309 0
 127 008a 064B     		ldr	r3, .L4+8
 128 008c 064A     		ldr	r2, .L4+12
 129 008e 1A60     		str	r2, [r3]
 310:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** }
 130              		.loc 1 310 0
 131 0090 00BF     		nop
 132 0092 BD46     		mov	sp, r7
 133              	.LCFI2:
 134              		.cfi_def_cfa_register 13
 135              		@ sp needed
 136 0094 5DF8047B 		ldr	r7, [sp], #4
 137              	.LCFI3:
 138              		.cfi_restore 7
 139              		.cfi_def_cfa_offset 0
 140 0098 7047     		bx	lr
 141              	.L5:
 142 009a 00BF     		.align	2
 143              	.L4:
 144 009c 00100240 		.word	1073876992
 145 00a0 FFF4FEEA 		.word	-352389889
 146 00a4 00000000 		.word	SystemCoreClock
 147 00a8 00093D00 		.word	4000000
 148              		.cfi_endproc
 149              	.LFE126:
 151              		.section	.text.HAL_RCC_OscConfig,"ax",%progbits
 152              		.align	1
 153              		.global	HAL_RCC_OscConfig
 154              		.syntax unified
 155              		.thumb
 156              		.thumb_func
 157              		.fpu fpv4-sp-d16
 159              	HAL_RCC_OscConfig:
 160              	.LFB127:
 311:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
 312:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** /**
 313:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   * @brief  Initialize the RCC Oscillators according to the specified parameters in the
 314:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   *         RCC_OscInitTypeDef.
 315:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   * @param  RCC_OscInitStruct  pointer to an RCC_OscInitTypeDef structure that
 316:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   *         contains the configuration information for the RCC Oscillators.
 317:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   * @note   The PLL is not disabled when used as system clock.
 318:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   * @note   Transitions LSE Bypass to LSE On and LSE On to LSE Bypass are not
 319:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   *         supported by this macro. User should request a transition to LSE Off
 320:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   *         first and then LSE On or LSE Bypass.
 321:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   * @note   Transition HSE Bypass to HSE On and HSE On to HSE Bypass are not
 322:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   *         supported by this macro. User should request a transition to HSE Off
 323:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   *         first and then HSE On or HSE Bypass.
ARM GAS  /tmp/ccWowvEN.s 			page 16


 324:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   * @retval HAL status
 325:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   */
 326:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
 327:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** {
 161              		.loc 1 327 0
 162              		.cfi_startproc
 163              		@ args = 0, pretend = 0, frame = 48
 164              		@ frame_needed = 1, uses_anonymous_args = 0
 165 0000 80B5     		push	{r7, lr}
 166              	.LCFI4:
 167              		.cfi_def_cfa_offset 8
 168              		.cfi_offset 7, -8
 169              		.cfi_offset 14, -4
 170 0002 8CB0     		sub	sp, sp, #48
 171              	.LCFI5:
 172              		.cfi_def_cfa_offset 56
 173 0004 00AF     		add	r7, sp, #0
 174              	.LCFI6:
 175              		.cfi_def_cfa_register 7
 176 0006 7860     		str	r0, [r7, #4]
 328:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   uint32_t tickstart = 0;
 177              		.loc 1 328 0
 178 0008 0023     		movs	r3, #0
 179 000a BB62     		str	r3, [r7, #40]
 329:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
 330:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   /* Check the parameters */
 331:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   assert_param(RCC_OscInitStruct != NULL);
 332:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 333:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
 334:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   /*----------------------------- MSI Configuration --------------------------*/
 335:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 180              		.loc 1 335 0
 181 000c 7B68     		ldr	r3, [r7, #4]
 182 000e 1B68     		ldr	r3, [r3]
 183 0010 03F01003 		and	r3, r3, #16
 184 0014 002B     		cmp	r3, #0
 185 0016 00F0DB80 		beq	.L7
 336:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   {
 337:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     /* Check the parameters */
 338:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
 339:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
 340:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));
 341:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
 342:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     /* When the MSI is used as system clock it will not be disabled */
 343:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 186              		.loc 1 343 0
 187 001a A24B     		ldr	r3, .L76
 188 001c 9B68     		ldr	r3, [r3, #8]
 189 001e 03F00C03 		and	r3, r3, #12
 190 0022 002B     		cmp	r3, #0
 191 0024 40F08480 		bne	.L8
 344:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     {
 345:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF
 192              		.loc 1 345 0
 193 0028 9E4B     		ldr	r3, .L76
 194 002a 1B68     		ldr	r3, [r3]
 195 002c 03F00203 		and	r3, r3, #2
ARM GAS  /tmp/ccWowvEN.s 			page 17


 196 0030 002B     		cmp	r3, #0
 197 0032 05D0     		beq	.L9
 198              		.loc 1 345 0 is_stmt 0 discriminator 1
 199 0034 7B68     		ldr	r3, [r7, #4]
 200 0036 9B69     		ldr	r3, [r3, #24]
 201 0038 002B     		cmp	r3, #0
 202 003a 01D1     		bne	.L9
 346:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       {
 347:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         return HAL_ERROR;
 203              		.loc 1 347 0 is_stmt 1
 204 003c 0123     		movs	r3, #1
 205 003e 5FE3     		b	.L10
 206              	.L9:
 348:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       }
 349:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
 350:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****        /* Otherwise, just the calibration and MSI range change are allowed */
 351:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       else
 352:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       {
 353:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
 354:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****            must be correctly programmed according to the frequency of the CPU clock
 355:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****            (HCLK) and the supply voltage of the device. */
 356:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 207              		.loc 1 356 0
 208 0040 7B68     		ldr	r3, [r7, #4]
 209 0042 1A6A     		ldr	r2, [r3, #32]
 210 0044 974B     		ldr	r3, .L76
 211 0046 1B68     		ldr	r3, [r3]
 212 0048 03F00803 		and	r3, r3, #8
 213 004c 002B     		cmp	r3, #0
 214 004e 04D0     		beq	.L11
 215              		.loc 1 356 0 is_stmt 0 discriminator 1
 216 0050 944B     		ldr	r3, .L76
 217 0052 1B68     		ldr	r3, [r3]
 218 0054 03F0F003 		and	r3, r3, #240
 219 0058 05E0     		b	.L12
 220              	.L11:
 221              		.loc 1 356 0 discriminator 2
 222 005a 924B     		ldr	r3, .L76
 223 005c D3F89430 		ldr	r3, [r3, #148]
 224 0060 1B09     		lsrs	r3, r3, #4
 225 0062 03F0F003 		and	r3, r3, #240
 226              	.L12:
 227              		.loc 1 356 0 discriminator 4
 228 0066 9A42     		cmp	r2, r3
 229 0068 23D9     		bls	.L13
 357:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         {
 358:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****           /* First increase number of wait states update if necessary */
 359:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****           if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 230              		.loc 1 359 0 is_stmt 1
 231 006a 7B68     		ldr	r3, [r7, #4]
 232 006c 1B6A     		ldr	r3, [r3, #32]
 233 006e 1846     		mov	r0, r3
 234 0070 FFF7FEFF 		bl	RCC_SetFlashLatencyFromMSIRange
 235 0074 0346     		mov	r3, r0
 236 0076 002B     		cmp	r3, #0
 237 0078 01D0     		beq	.L14
 360:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****           {
ARM GAS  /tmp/ccWowvEN.s 			page 18


 361:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****             return HAL_ERROR;
 238              		.loc 1 361 0
 239 007a 0123     		movs	r3, #1
 240 007c 40E3     		b	.L10
 241              	.L14:
 362:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****           }
 363:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
 364:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****           /* Selects the Multiple Speed oscillator (MSI) clock range .*/
 365:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****           __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 242              		.loc 1 365 0
 243 007e 894A     		ldr	r2, .L76
 244 0080 884B     		ldr	r3, .L76
 245 0082 1B68     		ldr	r3, [r3]
 246 0084 43F00803 		orr	r3, r3, #8
 247 0088 1360     		str	r3, [r2]
 248 008a 8649     		ldr	r1, .L76
 249 008c 854B     		ldr	r3, .L76
 250 008e 1B68     		ldr	r3, [r3]
 251 0090 23F0F002 		bic	r2, r3, #240
 252 0094 7B68     		ldr	r3, [r7, #4]
 253 0096 1B6A     		ldr	r3, [r3, #32]
 254 0098 1343     		orrs	r3, r3, r2
 255 009a 0B60     		str	r3, [r1]
 366:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****           /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
 367:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****           __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 256              		.loc 1 367 0
 257 009c 8149     		ldr	r1, .L76
 258 009e 814B     		ldr	r3, .L76
 259 00a0 5B68     		ldr	r3, [r3, #4]
 260 00a2 23F47F42 		bic	r2, r3, #65280
 261 00a6 7B68     		ldr	r3, [r7, #4]
 262 00a8 DB69     		ldr	r3, [r3, #28]
 263 00aa 1B02     		lsls	r3, r3, #8
 264 00ac 1343     		orrs	r3, r3, r2
 265 00ae 4B60     		str	r3, [r1, #4]
 266 00b0 22E0     		b	.L15
 267              	.L13:
 368:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         }
 369:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         else
 370:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         {
 371:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****           /* Else, keep current flash latency while decreasing applies */
 372:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****           /* Selects the Multiple Speed oscillator (MSI) clock range .*/
 373:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****           __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 268              		.loc 1 373 0
 269 00b2 7C4A     		ldr	r2, .L76
 270 00b4 7B4B     		ldr	r3, .L76
 271 00b6 1B68     		ldr	r3, [r3]
 272 00b8 43F00803 		orr	r3, r3, #8
 273 00bc 1360     		str	r3, [r2]
 274 00be 7949     		ldr	r1, .L76
 275 00c0 784B     		ldr	r3, .L76
 276 00c2 1B68     		ldr	r3, [r3]
 277 00c4 23F0F002 		bic	r2, r3, #240
 278 00c8 7B68     		ldr	r3, [r7, #4]
 279 00ca 1B6A     		ldr	r3, [r3, #32]
 280 00cc 1343     		orrs	r3, r3, r2
 281 00ce 0B60     		str	r3, [r1]
ARM GAS  /tmp/ccWowvEN.s 			page 19


 374:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****           /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
 375:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****           __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 282              		.loc 1 375 0
 283 00d0 7449     		ldr	r1, .L76
 284 00d2 744B     		ldr	r3, .L76
 285 00d4 5B68     		ldr	r3, [r3, #4]
 286 00d6 23F47F42 		bic	r2, r3, #65280
 287 00da 7B68     		ldr	r3, [r7, #4]
 288 00dc DB69     		ldr	r3, [r3, #28]
 289 00de 1B02     		lsls	r3, r3, #8
 290 00e0 1343     		orrs	r3, r3, r2
 291 00e2 4B60     		str	r3, [r1, #4]
 376:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
 377:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****           /* Decrease number of wait states update if necessary */
 378:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****           if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 292              		.loc 1 378 0
 293 00e4 7B68     		ldr	r3, [r7, #4]
 294 00e6 1B6A     		ldr	r3, [r3, #32]
 295 00e8 1846     		mov	r0, r3
 296 00ea FFF7FEFF 		bl	RCC_SetFlashLatencyFromMSIRange
 297 00ee 0346     		mov	r3, r0
 298 00f0 002B     		cmp	r3, #0
 299 00f2 01D0     		beq	.L15
 379:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****           {
 380:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****             return HAL_ERROR;
 300              		.loc 1 380 0
 301 00f4 0123     		movs	r3, #1
 302 00f6 03E3     		b	.L10
 303              	.L15:
 381:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****           }          
 382:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         }
 383:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
 384:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         /* Update the SystemCoreClock global variable */
 385:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> 
 304              		.loc 1 385 0
 305 00f8 FFF7FEFF 		bl	HAL_RCC_GetSysClockFreq
 306 00fc 0146     		mov	r1, r0
 307 00fe 694B     		ldr	r3, .L76
 308 0100 9B68     		ldr	r3, [r3, #8]
 309 0102 03F0F002 		and	r2, r3, #240
 310 0106 F023     		movs	r3, #240
 311 0108 7B62     		str	r3, [r7, #36]
 312              	.LBB46:
 313              	.LBB47:
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 378:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 379:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 381:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 384:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("wfi");
 386:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 387:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 388:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccWowvEN.s 			page 20


 389:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 391:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 392:Drivers/CMSIS/Include/cmsis_gcc.h ****     a low-power state until one of a number of events occurs.
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 396:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("wfe");
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 398:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 399:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 400:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 403:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
 405:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("sev");
 407:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 408:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 409:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 410:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 413:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 416:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
 417:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 418:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 424:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 426:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 427:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
 428:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 429:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 430:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 431:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 432:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 433:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 435:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 436:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 438:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
 439:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 440:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 441:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 442:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 444:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 445:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
ARM GAS  /tmp/ccWowvEN.s 			page 21


 446:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in integer value.
 447:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 448:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 450:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV(uint32_t value)
 451:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 452:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 455:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 456:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 457:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 458:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 459:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 460:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 461:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 462:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 463:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 464:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 465:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in two unsigned short values.
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 467:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 468:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV16(uint32_t value)
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 471:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 472:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 475:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 478:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 479:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order in signed short value
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a signed short value with sign extension to integer.
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 482:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 483:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE int32_t __REVSH(int32_t value)
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 486:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (short)__builtin_bswap16(value);
 488:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t result;
 490:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 491:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 492:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 493:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 495:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 498:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 499:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 500:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 501:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Number of Bits to rotate
 502:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
ARM GAS  /tmp/ccWowvEN.s 			page 22


 503:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 504:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 505:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 506:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 507:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 508:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 509:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 511:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 513:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 516:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 518:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 520:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 521:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 522:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 526:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 528:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 529:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 314              		.loc 2 531 0
 315 010a 7B6A     		ldr	r3, [r7, #36]
 316              		.syntax unified
 317              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 318 010c 93FAA3F3 		rbit r3, r3
 319              	@ 0 "" 2
 320              		.thumb
 321              		.syntax unified
 322 0110 3B62     		str	r3, [r7, #32]
 532:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 533:Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t s = 4 /*sizeof(v)*/ * 8 - 1; /* extra shift needed at end */
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:Drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
 536:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value; value >>= 1U)
 537:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 538:Drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
 540:Drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
 541:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 542:Drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 544:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 323              		.loc 2 544 0
 324 0112 3B6A     		ldr	r3, [r7, #32]
 325              	.LBE47:
 326              	.LBE46:
 327              		.loc 1 385 0
 328 0114 B3FA83F3 		clz	r3, r3
ARM GAS  /tmp/ccWowvEN.s 			page 23


 329 0118 22FA03F3 		lsr	r3, r2, r3
 330 011c 624A     		ldr	r2, .L76+4
 331 011e D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 332 0120 21FA03F3 		lsr	r3, r1, r3
 333 0124 614A     		ldr	r2, .L76+8
 334 0126 1360     		str	r3, [r2]
 386:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         
 387:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         /* Configure the source of time base considering new system clocks settings*/
 388:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         HAL_InitTick (TICK_INT_PRIORITY);
 335              		.loc 1 388 0
 336 0128 0020     		movs	r0, #0
 337 012a FFF7FEFF 		bl	HAL_InitTick
 338 012e 4FE0     		b	.L7
 339              	.L8:
 389:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       }
 390:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     }
 391:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     else
 392:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     {
 393:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       /* Check the MSI State */
 394:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 340              		.loc 1 394 0
 341 0130 7B68     		ldr	r3, [r7, #4]
 342 0132 9B69     		ldr	r3, [r3, #24]
 343 0134 002B     		cmp	r3, #0
 344 0136 32D0     		beq	.L17
 395:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       {
 396:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         /* Enable the Internal High Speed oscillator (MSI). */
 397:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         __HAL_RCC_MSI_ENABLE();
 345              		.loc 1 397 0
 346 0138 5A4A     		ldr	r2, .L76
 347 013a 5A4B     		ldr	r3, .L76
 348 013c 1B68     		ldr	r3, [r3]
 349 013e 43F00103 		orr	r3, r3, #1
 350 0142 1360     		str	r3, [r2]
 398:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
 399:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         /* Get timeout */
 400:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 351              		.loc 1 400 0
 352 0144 FFF7FEFF 		bl	HAL_GetTick
 353 0148 B862     		str	r0, [r7, #40]
 401:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
 402:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         /* Wait till MSI is ready */
 403:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 354              		.loc 1 403 0
 355 014a 08E0     		b	.L18
 356              	.L19:
 404:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         {
 405:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 357              		.loc 1 405 0
 358 014c FFF7FEFF 		bl	HAL_GetTick
 359 0150 0246     		mov	r2, r0
 360 0152 BB6A     		ldr	r3, [r7, #40]
 361 0154 D31A     		subs	r3, r2, r3
 362 0156 022B     		cmp	r3, #2
 363 0158 01D9     		bls	.L18
 406:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****           {
 407:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****             return HAL_TIMEOUT;
ARM GAS  /tmp/ccWowvEN.s 			page 24


 364              		.loc 1 407 0
 365 015a 0323     		movs	r3, #3
 366 015c D0E2     		b	.L10
 367              	.L18:
 403:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         {
 368              		.loc 1 403 0
 369 015e 514B     		ldr	r3, .L76
 370 0160 1B68     		ldr	r3, [r3]
 371 0162 03F00203 		and	r3, r3, #2
 372 0166 002B     		cmp	r3, #0
 373 0168 F0D0     		beq	.L19
 408:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****           }
 409:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         }
 410:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
 411:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 374              		.loc 1 411 0
 375 016a 4E4A     		ldr	r2, .L76
 376 016c 4D4B     		ldr	r3, .L76
 377 016e 1B68     		ldr	r3, [r3]
 378 0170 43F00803 		orr	r3, r3, #8
 379 0174 1360     		str	r3, [r2]
 380 0176 4B49     		ldr	r1, .L76
 381 0178 4A4B     		ldr	r3, .L76
 382 017a 1B68     		ldr	r3, [r3]
 383 017c 23F0F002 		bic	r2, r3, #240
 384 0180 7B68     		ldr	r3, [r7, #4]
 385 0182 1B6A     		ldr	r3, [r3, #32]
 386 0184 1343     		orrs	r3, r3, r2
 387 0186 0B60     		str	r3, [r1]
 412:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
 413:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 388              		.loc 1 413 0
 389 0188 4649     		ldr	r1, .L76
 390 018a 464B     		ldr	r3, .L76
 391 018c 5B68     		ldr	r3, [r3, #4]
 392 018e 23F47F42 		bic	r2, r3, #65280
 393 0192 7B68     		ldr	r3, [r7, #4]
 394 0194 DB69     		ldr	r3, [r3, #28]
 395 0196 1B02     		lsls	r3, r3, #8
 396 0198 1343     		orrs	r3, r3, r2
 397 019a 4B60     		str	r3, [r1, #4]
 398 019c 18E0     		b	.L7
 399              	.L17:
 414:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
 415:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       }
 416:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       else
 417:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       {
 418:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         /* Disable the Internal High Speed oscillator (MSI). */
 419:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         __HAL_RCC_MSI_DISABLE();
 400              		.loc 1 419 0
 401 019e 414A     		ldr	r2, .L76
 402 01a0 404B     		ldr	r3, .L76
 403 01a2 1B68     		ldr	r3, [r3]
 404 01a4 23F00103 		bic	r3, r3, #1
 405 01a8 1360     		str	r3, [r2]
 420:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
 421:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         /* Get timeout */
ARM GAS  /tmp/ccWowvEN.s 			page 25


 422:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 406              		.loc 1 422 0
 407 01aa FFF7FEFF 		bl	HAL_GetTick
 408 01ae B862     		str	r0, [r7, #40]
 423:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
 424:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         /* Wait till MSI is ready */
 425:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET)
 409              		.loc 1 425 0
 410 01b0 08E0     		b	.L20
 411              	.L21:
 426:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         {
 427:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 412              		.loc 1 427 0
 413 01b2 FFF7FEFF 		bl	HAL_GetTick
 414 01b6 0246     		mov	r2, r0
 415 01b8 BB6A     		ldr	r3, [r7, #40]
 416 01ba D31A     		subs	r3, r2, r3
 417 01bc 022B     		cmp	r3, #2
 418 01be 01D9     		bls	.L20
 428:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****           {
 429:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****             return HAL_TIMEOUT;
 419              		.loc 1 429 0
 420 01c0 0323     		movs	r3, #3
 421 01c2 9DE2     		b	.L10
 422              	.L20:
 425:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         {
 423              		.loc 1 425 0
 424 01c4 374B     		ldr	r3, .L76
 425 01c6 1B68     		ldr	r3, [r3]
 426 01c8 03F00203 		and	r3, r3, #2
 427 01cc 002B     		cmp	r3, #0
 428 01ce F0D1     		bne	.L21
 429              	.L7:
 430:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****           }
 431:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         }
 432:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       }
 433:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     }
 434:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   }
 435:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   /*------------------------------- HSE Configuration ------------------------*/
 436:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 430              		.loc 1 436 0
 431 01d0 7B68     		ldr	r3, [r7, #4]
 432 01d2 1B68     		ldr	r3, [r3]
 433 01d4 03F00103 		and	r3, r3, #1
 434 01d8 002B     		cmp	r3, #0
 435 01da 7AD0     		beq	.L22
 437:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   {
 438:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     /* Check the parameters */
 439:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 440:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
 441:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowe
 442:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || 
 436              		.loc 1 442 0
 437 01dc 314B     		ldr	r3, .L76
 438 01de 9B68     		ldr	r3, [r3, #8]
 439 01e0 03F00C03 		and	r3, r3, #12
 440 01e4 082B     		cmp	r3, #8
ARM GAS  /tmp/ccWowvEN.s 			page 26


 441 01e6 0BD0     		beq	.L23
 443:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RC
 442              		.loc 1 443 0 discriminator 1
 443 01e8 2E4B     		ldr	r3, .L76
 444 01ea 9B68     		ldr	r3, [r3, #8]
 445 01ec 03F00C03 		and	r3, r3, #12
 442:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RC
 446              		.loc 1 442 0 discriminator 1
 447 01f0 0C2B     		cmp	r3, #12
 448 01f2 11D1     		bne	.L24
 449              		.loc 1 443 0
 450 01f4 2B4B     		ldr	r3, .L76
 451 01f6 DB68     		ldr	r3, [r3, #12]
 452 01f8 03F00303 		and	r3, r3, #3
 453 01fc 032B     		cmp	r3, #3
 454 01fe 0BD1     		bne	.L24
 455              	.L23:
 444:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     {
 445:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF
 456              		.loc 1 445 0
 457 0200 284B     		ldr	r3, .L76
 458 0202 1B68     		ldr	r3, [r3]
 459 0204 03F40033 		and	r3, r3, #131072
 460 0208 002B     		cmp	r3, #0
 461 020a 61D0     		beq	.L75
 462              		.loc 1 445 0 is_stmt 0 discriminator 1
 463 020c 7B68     		ldr	r3, [r7, #4]
 464 020e 5B68     		ldr	r3, [r3, #4]
 465 0210 002B     		cmp	r3, #0
 466 0212 5DD1     		bne	.L75
 446:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       {
 447:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         return HAL_ERROR;
 467              		.loc 1 447 0 is_stmt 1
 468 0214 0123     		movs	r3, #1
 469 0216 73E2     		b	.L10
 470              	.L24:
 448:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       }
 449:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     }
 450:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     else
 451:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     {
 452:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       /* Set the new HSE configuration ---------------------------------------*/
 453:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 471              		.loc 1 453 0
 472 0218 7B68     		ldr	r3, [r7, #4]
 473 021a 5B68     		ldr	r3, [r3, #4]
 474 021c B3F5803F 		cmp	r3, #65536
 475 0220 06D1     		bne	.L26
 476              		.loc 1 453 0 is_stmt 0 discriminator 1
 477 0222 204A     		ldr	r2, .L76
 478 0224 1F4B     		ldr	r3, .L76
 479 0226 1B68     		ldr	r3, [r3]
 480 0228 43F48033 		orr	r3, r3, #65536
 481 022c 1360     		str	r3, [r2]
 482 022e 1DE0     		b	.L27
 483              	.L26:
 484              		.loc 1 453 0 discriminator 2
 485 0230 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccWowvEN.s 			page 27


 486 0232 5B68     		ldr	r3, [r3, #4]
 487 0234 B3F5A02F 		cmp	r3, #327680
 488 0238 0CD1     		bne	.L28
 489              		.loc 1 453 0 discriminator 3
 490 023a 1A4A     		ldr	r2, .L76
 491 023c 194B     		ldr	r3, .L76
 492 023e 1B68     		ldr	r3, [r3]
 493 0240 43F48023 		orr	r3, r3, #262144
 494 0244 1360     		str	r3, [r2]
 495 0246 174A     		ldr	r2, .L76
 496 0248 164B     		ldr	r3, .L76
 497 024a 1B68     		ldr	r3, [r3]
 498 024c 43F48033 		orr	r3, r3, #65536
 499 0250 1360     		str	r3, [r2]
 500 0252 0BE0     		b	.L27
 501              	.L28:
 502              		.loc 1 453 0 discriminator 4
 503 0254 134A     		ldr	r2, .L76
 504 0256 134B     		ldr	r3, .L76
 505 0258 1B68     		ldr	r3, [r3]
 506 025a 23F48033 		bic	r3, r3, #65536
 507 025e 1360     		str	r3, [r2]
 508 0260 104A     		ldr	r2, .L76
 509 0262 104B     		ldr	r3, .L76
 510 0264 1B68     		ldr	r3, [r3]
 511 0266 23F48023 		bic	r3, r3, #262144
 512 026a 1360     		str	r3, [r2]
 513              	.L27:
 454:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
 455:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       /* Check the HSE State */
 456:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 514              		.loc 1 456 0 is_stmt 1
 515 026c 7B68     		ldr	r3, [r7, #4]
 516 026e 5B68     		ldr	r3, [r3, #4]
 517 0270 002B     		cmp	r3, #0
 518 0272 13D0     		beq	.L29
 457:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       {
 458:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         /* Get Start Tick*/
 459:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 519              		.loc 1 459 0
 520 0274 FFF7FEFF 		bl	HAL_GetTick
 521 0278 B862     		str	r0, [r7, #40]
 460:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
 461:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         /* Wait till HSE is ready */
 462:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 522              		.loc 1 462 0
 523 027a 08E0     		b	.L30
 524              	.L31:
 463:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         {
 464:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 525              		.loc 1 464 0
 526 027c FFF7FEFF 		bl	HAL_GetTick
 527 0280 0246     		mov	r2, r0
 528 0282 BB6A     		ldr	r3, [r7, #40]
 529 0284 D31A     		subs	r3, r2, r3
 530 0286 642B     		cmp	r3, #100
 531 0288 01D9     		bls	.L30
ARM GAS  /tmp/ccWowvEN.s 			page 28


 465:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****           {
 466:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****             return HAL_TIMEOUT;
 532              		.loc 1 466 0
 533 028a 0323     		movs	r3, #3
 534 028c 38E2     		b	.L10
 535              	.L30:
 462:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         {
 536              		.loc 1 462 0
 537 028e 054B     		ldr	r3, .L76
 538 0290 1B68     		ldr	r3, [r3]
 539 0292 03F40033 		and	r3, r3, #131072
 540 0296 002B     		cmp	r3, #0
 541 0298 F0D0     		beq	.L31
 542 029a 1AE0     		b	.L22
 543              	.L29:
 467:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****           }
 468:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         }
 469:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       }
 470:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       else
 471:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       {
 472:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         /* Get Start Tick*/
 473:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 544              		.loc 1 473 0
 545 029c FFF7FEFF 		bl	HAL_GetTick
 546 02a0 B862     		str	r0, [r7, #40]
 474:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
 475:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         /* Wait till HSE is disabled */
 476:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 547              		.loc 1 476 0
 548 02a2 0EE0     		b	.L32
 549              	.L77:
 550              		.align	2
 551              	.L76:
 552 02a4 00100240 		.word	1073876992
 553 02a8 00000000 		.word	AHBPrescTable
 554 02ac 00000000 		.word	SystemCoreClock
 555              	.L33:
 477:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         {
 478:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 556              		.loc 1 478 0
 557 02b0 FFF7FEFF 		bl	HAL_GetTick
 558 02b4 0246     		mov	r2, r0
 559 02b6 BB6A     		ldr	r3, [r7, #40]
 560 02b8 D31A     		subs	r3, r2, r3
 561 02ba 642B     		cmp	r3, #100
 562 02bc 01D9     		bls	.L32
 479:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****           {
 480:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****             return HAL_TIMEOUT;
 563              		.loc 1 480 0
 564 02be 0323     		movs	r3, #3
 565 02c0 1EE2     		b	.L10
 566              	.L32:
 476:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         {
 567              		.loc 1 476 0
 568 02c2 B04B     		ldr	r3, .L78
 569 02c4 1B68     		ldr	r3, [r3]
 570 02c6 03F40033 		and	r3, r3, #131072
ARM GAS  /tmp/ccWowvEN.s 			page 29


 571 02ca 002B     		cmp	r3, #0
 572 02cc F0D1     		bne	.L33
 573 02ce 00E0     		b	.L22
 574              	.L75:
 445:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       {
 575              		.loc 1 445 0
 576 02d0 00BF     		nop
 577              	.L22:
 481:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****           }
 482:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         }
 483:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       }
 484:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     }
 485:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   }
 486:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   /*----------------------------- HSI Configuration --------------------------*/
 487:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 578              		.loc 1 487 0
 579 02d2 7B68     		ldr	r3, [r7, #4]
 580 02d4 1B68     		ldr	r3, [r3]
 581 02d6 03F00203 		and	r3, r3, #2
 582 02da 002B     		cmp	r3, #0
 583 02dc 7FD0     		beq	.L34
 488:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   {
 489:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     /* Check the parameters */
 490:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 491:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 492:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
 493:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock *
 494:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 584              		.loc 1 494 0
 585 02de A94B     		ldr	r3, .L78
 586 02e0 9B68     		ldr	r3, [r3, #8]
 587 02e2 03F00C03 		and	r3, r3, #12
 588 02e6 042B     		cmp	r3, #4
 589 02e8 0BD0     		beq	.L35
 495:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RC
 590              		.loc 1 495 0 discriminator 1
 591 02ea A64B     		ldr	r3, .L78
 592 02ec 9B68     		ldr	r3, [r3, #8]
 593 02ee 03F00C03 		and	r3, r3, #12
 494:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RC
 594              		.loc 1 494 0 discriminator 1
 595 02f2 0C2B     		cmp	r3, #12
 596 02f4 27D1     		bne	.L36
 597              		.loc 1 495 0
 598 02f6 A34B     		ldr	r3, .L78
 599 02f8 DB68     		ldr	r3, [r3, #12]
 600 02fa 03F00303 		and	r3, r3, #3
 601 02fe 022B     		cmp	r3, #2
 602 0300 21D1     		bne	.L36
 603              	.L35:
 496:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     {
 497:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       /* When HSI is used as system clock it will not be disabled */
 498:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF
 604              		.loc 1 498 0
 605 0302 A04B     		ldr	r3, .L78
 606 0304 1B68     		ldr	r3, [r3]
 607 0306 03F48063 		and	r3, r3, #1024
ARM GAS  /tmp/ccWowvEN.s 			page 30


 608 030a 002B     		cmp	r3, #0
 609 030c 05D0     		beq	.L37
 610              		.loc 1 498 0 is_stmt 0 discriminator 1
 611 030e 7B68     		ldr	r3, [r7, #4]
 612 0310 DB68     		ldr	r3, [r3, #12]
 613 0312 002B     		cmp	r3, #0
 614 0314 01D1     		bne	.L37
 499:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       {
 500:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         return HAL_ERROR;
 615              		.loc 1 500 0 is_stmt 1
 616 0316 0123     		movs	r3, #1
 617 0318 F2E1     		b	.L10
 618              	.L37:
 501:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       }
 502:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       /* Otherwise, just the calibration is allowed */
 503:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       else
 504:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       {
 505:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
 506:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 619              		.loc 1 506 0
 620 031a 9A48     		ldr	r0, .L78
 621 031c 994B     		ldr	r3, .L78
 622 031e 5B68     		ldr	r3, [r3, #4]
 623 0320 23F0F852 		bic	r2, r3, #520093696
 624 0324 7B68     		ldr	r3, [r7, #4]
 625 0326 1969     		ldr	r1, [r3, #16]
 626 0328 4FF0F853 		mov	r3, #520093696
 627 032c FB61     		str	r3, [r7, #28]
 628              	.LBB48:
 629              	.LBB49:
 531:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 630              		.loc 2 531 0
 631 032e FB69     		ldr	r3, [r7, #28]
 632              		.syntax unified
 633              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 634 0330 93FAA3F3 		rbit r3, r3
 635              	@ 0 "" 2
 636              		.thumb
 637              		.syntax unified
 638 0334 BB61     		str	r3, [r7, #24]
 639              		.loc 2 544 0
 640 0336 BB69     		ldr	r3, [r7, #24]
 641              	.LBE49:
 642              	.LBE48:
 643              		.loc 1 506 0
 644 0338 B3FA83F3 		clz	r3, r3
 645 033c 01FA03F3 		lsl	r3, r1, r3
 646 0340 1343     		orrs	r3, r3, r2
 647 0342 4360     		str	r3, [r0, #4]
 498:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       {
 648              		.loc 1 498 0
 649 0344 4BE0     		b	.L34
 650              	.L36:
 507:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       }
 508:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     }
 509:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     else
 510:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     {
ARM GAS  /tmp/ccWowvEN.s 			page 31


 511:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       /* Check the HSI State */
 512:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 651              		.loc 1 512 0
 652 0346 7B68     		ldr	r3, [r7, #4]
 653 0348 DB68     		ldr	r3, [r3, #12]
 654 034a 002B     		cmp	r3, #0
 655 034c 2ED0     		beq	.L39
 513:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       {
 514:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         /* Enable the Internal High Speed oscillator (HSI). */
 515:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         __HAL_RCC_HSI_ENABLE();
 656              		.loc 1 515 0
 657 034e 8D4A     		ldr	r2, .L78
 658 0350 8C4B     		ldr	r3, .L78
 659 0352 1B68     		ldr	r3, [r3]
 660 0354 43F48073 		orr	r3, r3, #256
 661 0358 1360     		str	r3, [r2]
 516:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
 517:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         /* Get Start Tick*/
 518:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 662              		.loc 1 518 0
 663 035a FFF7FEFF 		bl	HAL_GetTick
 664 035e B862     		str	r0, [r7, #40]
 519:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
 520:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         /* Wait till HSI is ready */
 521:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 665              		.loc 1 521 0
 666 0360 08E0     		b	.L40
 667              	.L41:
 522:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         {
 523:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 668              		.loc 1 523 0
 669 0362 FFF7FEFF 		bl	HAL_GetTick
 670 0366 0246     		mov	r2, r0
 671 0368 BB6A     		ldr	r3, [r7, #40]
 672 036a D31A     		subs	r3, r2, r3
 673 036c 022B     		cmp	r3, #2
 674 036e 01D9     		bls	.L40
 524:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****           {
 525:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****             return HAL_TIMEOUT;
 675              		.loc 1 525 0
 676 0370 0323     		movs	r3, #3
 677 0372 C5E1     		b	.L10
 678              	.L40:
 521:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         {
 679              		.loc 1 521 0
 680 0374 834B     		ldr	r3, .L78
 681 0376 1B68     		ldr	r3, [r3]
 682 0378 03F48063 		and	r3, r3, #1024
 683 037c 002B     		cmp	r3, #0
 684 037e F0D0     		beq	.L41
 526:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****           }
 527:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         }
 528:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
 529:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
 530:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 685              		.loc 1 530 0
 686 0380 8048     		ldr	r0, .L78
ARM GAS  /tmp/ccWowvEN.s 			page 32


 687 0382 804B     		ldr	r3, .L78
 688 0384 5B68     		ldr	r3, [r3, #4]
 689 0386 23F0F852 		bic	r2, r3, #520093696
 690 038a 7B68     		ldr	r3, [r7, #4]
 691 038c 1969     		ldr	r1, [r3, #16]
 692 038e 4FF0F853 		mov	r3, #520093696
 693 0392 7B61     		str	r3, [r7, #20]
 694              	.LBB50:
 695              	.LBB51:
 531:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 696              		.loc 2 531 0
 697 0394 7B69     		ldr	r3, [r7, #20]
 698              		.syntax unified
 699              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 700 0396 93FAA3F3 		rbit r3, r3
 701              	@ 0 "" 2
 702              		.thumb
 703              		.syntax unified
 704 039a 3B61     		str	r3, [r7, #16]
 705              		.loc 2 544 0
 706 039c 3B69     		ldr	r3, [r7, #16]
 707              	.LBE51:
 708              	.LBE50:
 709              		.loc 1 530 0
 710 039e B3FA83F3 		clz	r3, r3
 711 03a2 01FA03F3 		lsl	r3, r1, r3
 712 03a6 1343     		orrs	r3, r3, r2
 713 03a8 4360     		str	r3, [r0, #4]
 714 03aa 18E0     		b	.L34
 715              	.L39:
 531:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       }
 532:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       else
 533:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       {
 534:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         /* Disable the Internal High Speed oscillator (HSI). */
 535:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         __HAL_RCC_HSI_DISABLE();
 716              		.loc 1 535 0
 717 03ac 754A     		ldr	r2, .L78
 718 03ae 754B     		ldr	r3, .L78
 719 03b0 1B68     		ldr	r3, [r3]
 720 03b2 23F48073 		bic	r3, r3, #256
 721 03b6 1360     		str	r3, [r2]
 536:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
 537:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         /* Get Start Tick*/
 538:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 722              		.loc 1 538 0
 723 03b8 FFF7FEFF 		bl	HAL_GetTick
 724 03bc B862     		str	r0, [r7, #40]
 539:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
 540:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         /* Wait till HSI is disabled */
 541:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET)
 725              		.loc 1 541 0
 726 03be 08E0     		b	.L43
 727              	.L44:
 542:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         {
 543:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 728              		.loc 1 543 0
 729 03c0 FFF7FEFF 		bl	HAL_GetTick
ARM GAS  /tmp/ccWowvEN.s 			page 33


 730 03c4 0246     		mov	r2, r0
 731 03c6 BB6A     		ldr	r3, [r7, #40]
 732 03c8 D31A     		subs	r3, r2, r3
 733 03ca 022B     		cmp	r3, #2
 734 03cc 01D9     		bls	.L43
 544:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****           {
 545:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****             return HAL_TIMEOUT;
 735              		.loc 1 545 0
 736 03ce 0323     		movs	r3, #3
 737 03d0 96E1     		b	.L10
 738              	.L43:
 541:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         {
 739              		.loc 1 541 0
 740 03d2 6C4B     		ldr	r3, .L78
 741 03d4 1B68     		ldr	r3, [r3]
 742 03d6 03F48063 		and	r3, r3, #1024
 743 03da 002B     		cmp	r3, #0
 744 03dc F0D1     		bne	.L44
 745              	.L34:
 546:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****           }
 547:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         }
 548:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       }
 549:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     }
 550:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   }
 551:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   /*------------------------------ LSI Configuration -------------------------*/
 552:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 746              		.loc 1 552 0
 747 03de 7B68     		ldr	r3, [r7, #4]
 748 03e0 1B68     		ldr	r3, [r3]
 749 03e2 03F00803 		and	r3, r3, #8
 750 03e6 002B     		cmp	r3, #0
 751 03e8 3CD0     		beq	.L45
 553:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   {
 554:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     /* Check the parameters */
 555:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 556:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
 557:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     /* Check the LSI State */
 558:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 752              		.loc 1 558 0
 753 03ea 7B68     		ldr	r3, [r7, #4]
 754 03ec 5B69     		ldr	r3, [r3, #20]
 755 03ee 002B     		cmp	r3, #0
 756 03f0 1CD0     		beq	.L46
 559:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     {
 560:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       /* Enable the Internal Low Speed oscillator (LSI). */
 561:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       __HAL_RCC_LSI_ENABLE();
 757              		.loc 1 561 0
 758 03f2 644A     		ldr	r2, .L78
 759 03f4 634B     		ldr	r3, .L78
 760 03f6 D3F89430 		ldr	r3, [r3, #148]
 761 03fa 43F00103 		orr	r3, r3, #1
 762 03fe C2F89430 		str	r3, [r2, #148]
 562:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
 563:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       /* Get Start Tick*/
 564:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       tickstart = HAL_GetTick();
 763              		.loc 1 564 0
 764 0402 FFF7FEFF 		bl	HAL_GetTick
ARM GAS  /tmp/ccWowvEN.s 			page 34


 765 0406 B862     		str	r0, [r7, #40]
 565:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
 566:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       /* Wait till LSI is ready */
 567:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RESET)
 766              		.loc 1 567 0
 767 0408 08E0     		b	.L47
 768              	.L48:
 568:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       {
 569:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 769              		.loc 1 569 0
 770 040a FFF7FEFF 		bl	HAL_GetTick
 771 040e 0246     		mov	r2, r0
 772 0410 BB6A     		ldr	r3, [r7, #40]
 773 0412 D31A     		subs	r3, r2, r3
 774 0414 022B     		cmp	r3, #2
 775 0416 01D9     		bls	.L47
 570:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         {
 571:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****           return HAL_TIMEOUT;
 776              		.loc 1 571 0
 777 0418 0323     		movs	r3, #3
 778 041a 71E1     		b	.L10
 779              	.L47:
 567:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       {
 780              		.loc 1 567 0
 781 041c 594B     		ldr	r3, .L78
 782 041e D3F89430 		ldr	r3, [r3, #148]
 783 0422 03F00203 		and	r3, r3, #2
 784 0426 002B     		cmp	r3, #0
 785 0428 EFD0     		beq	.L48
 786 042a 1BE0     		b	.L45
 787              	.L46:
 572:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         }
 573:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       }
 574:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     }
 575:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     else
 576:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     {
 577:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       /* Disable the Internal Low Speed oscillator (LSI). */
 578:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       __HAL_RCC_LSI_DISABLE();
 788              		.loc 1 578 0
 789 042c 554A     		ldr	r2, .L78
 790 042e 554B     		ldr	r3, .L78
 791 0430 D3F89430 		ldr	r3, [r3, #148]
 792 0434 23F00103 		bic	r3, r3, #1
 793 0438 C2F89430 		str	r3, [r2, #148]
 579:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
 580:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       /* Get Start Tick*/
 581:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       tickstart = HAL_GetTick();
 794              		.loc 1 581 0
 795 043c FFF7FEFF 		bl	HAL_GetTick
 796 0440 B862     		str	r0, [r7, #40]
 582:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
 583:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       /* Wait till LSI is disabled */
 584:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != RESET)
 797              		.loc 1 584 0
 798 0442 08E0     		b	.L49
 799              	.L50:
 585:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       {
ARM GAS  /tmp/ccWowvEN.s 			page 35


 586:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800              		.loc 1 586 0
 801 0444 FFF7FEFF 		bl	HAL_GetTick
 802 0448 0246     		mov	r2, r0
 803 044a BB6A     		ldr	r3, [r7, #40]
 804 044c D31A     		subs	r3, r2, r3
 805 044e 022B     		cmp	r3, #2
 806 0450 01D9     		bls	.L49
 587:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         {
 588:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****           return HAL_TIMEOUT;
 807              		.loc 1 588 0
 808 0452 0323     		movs	r3, #3
 809 0454 54E1     		b	.L10
 810              	.L49:
 584:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       {
 811              		.loc 1 584 0
 812 0456 4B4B     		ldr	r3, .L78
 813 0458 D3F89430 		ldr	r3, [r3, #148]
 814 045c 03F00203 		and	r3, r3, #2
 815 0460 002B     		cmp	r3, #0
 816 0462 EFD1     		bne	.L50
 817              	.L45:
 589:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         }
 590:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       }
 591:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     }
 592:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   }
 593:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   /*------------------------------ LSE Configuration -------------------------*/
 594:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 818              		.loc 1 594 0
 819 0464 7B68     		ldr	r3, [r7, #4]
 820 0466 1B68     		ldr	r3, [r3]
 821 0468 03F00403 		and	r3, r3, #4
 822 046c 002B     		cmp	r3, #0
 823 046e 00F0A980 		beq	.L51
 824              	.LBB52:
 595:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   {
 596:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     FlagStatus       pwrclkchanged = RESET;
 825              		.loc 1 596 0
 826 0472 0023     		movs	r3, #0
 827 0474 87F82F30 		strb	r3, [r7, #47]
 597:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     
 598:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     /* Check the parameters */
 599:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 600:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
 601:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     /* Update LSE configuration in Backup Domain control register    */
 602:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     /* Requires to enable write access to Backup Domain of necessary */
 603:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 828              		.loc 1 603 0
 829 0478 424B     		ldr	r3, .L78
 830 047a 9B6D     		ldr	r3, [r3, #88]
 831 047c 03F08053 		and	r3, r3, #268435456
 832 0480 002B     		cmp	r3, #0
 833 0482 0ED1     		bne	.L52
 834              	.LBB53:
 604:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     {
 605:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       __HAL_RCC_PWR_CLK_ENABLE();
 835              		.loc 1 605 0
ARM GAS  /tmp/ccWowvEN.s 			page 36


 836 0484 3F4A     		ldr	r2, .L78
 837 0486 3F4B     		ldr	r3, .L78
 838 0488 9B6D     		ldr	r3, [r3, #88]
 839 048a 43F08053 		orr	r3, r3, #268435456
 840 048e 9365     		str	r3, [r2, #88]
 841 0490 3C4B     		ldr	r3, .L78
 842 0492 9B6D     		ldr	r3, [r3, #88]
 843 0494 03F08053 		and	r3, r3, #268435456
 844 0498 FB60     		str	r3, [r7, #12]
 845 049a FB68     		ldr	r3, [r7, #12]
 846              	.LBE53:
 606:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       pwrclkchanged = SET;
 847              		.loc 1 606 0
 848 049c 0123     		movs	r3, #1
 849 049e 87F82F30 		strb	r3, [r7, #47]
 850              	.L52:
 607:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     }
 608:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     
 609:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 851              		.loc 1 609 0
 852 04a2 394B     		ldr	r3, .L78+4
 853 04a4 1B68     		ldr	r3, [r3]
 854 04a6 03F48073 		and	r3, r3, #256
 855 04aa 002B     		cmp	r3, #0
 856 04ac 18D1     		bne	.L53
 610:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     {
 611:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       /* Enable write access to Backup domain */
 612:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       SET_BIT(PWR->CR1, PWR_CR1_DBP);
 857              		.loc 1 612 0
 858 04ae 364A     		ldr	r2, .L78+4
 859 04b0 354B     		ldr	r3, .L78+4
 860 04b2 1B68     		ldr	r3, [r3]
 861 04b4 43F48073 		orr	r3, r3, #256
 862 04b8 1360     		str	r3, [r2]
 613:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       
 614:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       /* Wait for Backup domain Write protection disable */
 615:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       tickstart = HAL_GetTick();
 863              		.loc 1 615 0
 864 04ba FFF7FEFF 		bl	HAL_GetTick
 865 04be B862     		str	r0, [r7, #40]
 616:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
 617:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 866              		.loc 1 617 0
 867 04c0 08E0     		b	.L54
 868              	.L55:
 618:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       {
 619:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 869              		.loc 1 619 0
 870 04c2 FFF7FEFF 		bl	HAL_GetTick
 871 04c6 0246     		mov	r2, r0
 872 04c8 BB6A     		ldr	r3, [r7, #40]
 873 04ca D31A     		subs	r3, r2, r3
 874 04cc 022B     		cmp	r3, #2
 875 04ce 01D9     		bls	.L54
 620:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         {
 621:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****           return HAL_TIMEOUT;
 876              		.loc 1 621 0
ARM GAS  /tmp/ccWowvEN.s 			page 37


 877 04d0 0323     		movs	r3, #3
 878 04d2 15E1     		b	.L10
 879              	.L54:
 617:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       {
 880              		.loc 1 617 0
 881 04d4 2C4B     		ldr	r3, .L78+4
 882 04d6 1B68     		ldr	r3, [r3]
 883 04d8 03F48073 		and	r3, r3, #256
 884 04dc 002B     		cmp	r3, #0
 885 04de F0D0     		beq	.L55
 886              	.L53:
 622:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         }
 623:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       }
 624:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     }
 625:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
 626:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     /* Set the new LSE configuration -----------------------------------------*/
 627:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 887              		.loc 1 627 0
 888 04e0 7B68     		ldr	r3, [r7, #4]
 889 04e2 9B68     		ldr	r3, [r3, #8]
 890 04e4 012B     		cmp	r3, #1
 891 04e6 08D1     		bne	.L56
 892              		.loc 1 627 0 is_stmt 0 discriminator 1
 893 04e8 264A     		ldr	r2, .L78
 894 04ea 264B     		ldr	r3, .L78
 895 04ec D3F89030 		ldr	r3, [r3, #144]
 896 04f0 43F00103 		orr	r3, r3, #1
 897 04f4 C2F89030 		str	r3, [r2, #144]
 898 04f8 24E0     		b	.L57
 899              	.L56:
 900              		.loc 1 627 0 discriminator 2
 901 04fa 7B68     		ldr	r3, [r7, #4]
 902 04fc 9B68     		ldr	r3, [r3, #8]
 903 04fe 052B     		cmp	r3, #5
 904 0500 10D1     		bne	.L58
 905              		.loc 1 627 0 discriminator 3
 906 0502 204A     		ldr	r2, .L78
 907 0504 1F4B     		ldr	r3, .L78
 908 0506 D3F89030 		ldr	r3, [r3, #144]
 909 050a 43F00403 		orr	r3, r3, #4
 910 050e C2F89030 		str	r3, [r2, #144]
 911 0512 1C4A     		ldr	r2, .L78
 912 0514 1B4B     		ldr	r3, .L78
 913 0516 D3F89030 		ldr	r3, [r3, #144]
 914 051a 43F00103 		orr	r3, r3, #1
 915 051e C2F89030 		str	r3, [r2, #144]
 916 0522 0FE0     		b	.L57
 917              	.L58:
 918              		.loc 1 627 0 discriminator 4
 919 0524 174A     		ldr	r2, .L78
 920 0526 174B     		ldr	r3, .L78
 921 0528 D3F89030 		ldr	r3, [r3, #144]
 922 052c 23F00103 		bic	r3, r3, #1
 923 0530 C2F89030 		str	r3, [r2, #144]
 924 0534 134A     		ldr	r2, .L78
 925 0536 134B     		ldr	r3, .L78
 926 0538 D3F89030 		ldr	r3, [r3, #144]
ARM GAS  /tmp/ccWowvEN.s 			page 38


 927 053c 23F00403 		bic	r3, r3, #4
 928 0540 C2F89030 		str	r3, [r2, #144]
 929              	.L57:
 628:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
 629:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     /* Check the LSE State */
 630:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 930              		.loc 1 630 0 is_stmt 1
 931 0544 7B68     		ldr	r3, [r7, #4]
 932 0546 9B68     		ldr	r3, [r3, #8]
 933 0548 002B     		cmp	r3, #0
 934 054a 16D0     		beq	.L59
 631:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     {
 632:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       /* Get Start Tick*/
 633:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       tickstart = HAL_GetTick();
 935              		.loc 1 633 0
 936 054c FFF7FEFF 		bl	HAL_GetTick
 937 0550 B862     		str	r0, [r7, #40]
 634:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
 635:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       /* Wait till LSE is ready */
 636:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 938              		.loc 1 636 0
 939 0552 0AE0     		b	.L60
 940              	.L61:
 637:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       {
 638:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 941              		.loc 1 638 0
 942 0554 FFF7FEFF 		bl	HAL_GetTick
 943 0558 0246     		mov	r2, r0
 944 055a BB6A     		ldr	r3, [r7, #40]
 945 055c D31A     		subs	r3, r2, r3
 946 055e 41F28832 		movw	r2, #5000
 947 0562 9342     		cmp	r3, r2
 948 0564 01D9     		bls	.L60
 639:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         {
 640:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****           return HAL_TIMEOUT;
 949              		.loc 1 640 0
 950 0566 0323     		movs	r3, #3
 951 0568 CAE0     		b	.L10
 952              	.L60:
 636:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       {
 953              		.loc 1 636 0
 954 056a 064B     		ldr	r3, .L78
 955 056c D3F89030 		ldr	r3, [r3, #144]
 956 0570 03F00203 		and	r3, r3, #2
 957 0574 002B     		cmp	r3, #0
 958 0576 EDD0     		beq	.L61
 959 0578 1AE0     		b	.L62
 960              	.L59:
 641:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         }
 642:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       }
 643:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     }
 644:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     else
 645:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     {
 646:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       /* Get Start Tick*/
 647:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       tickstart = HAL_GetTick();
 961              		.loc 1 647 0
 962 057a FFF7FEFF 		bl	HAL_GetTick
ARM GAS  /tmp/ccWowvEN.s 			page 39


 963 057e B862     		str	r0, [r7, #40]
 648:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
 649:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       /* Wait till LSE is disabled */
 650:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
 964              		.loc 1 650 0
 965 0580 0FE0     		b	.L63
 966              	.L79:
 967 0582 00BF     		.align	2
 968              	.L78:
 969 0584 00100240 		.word	1073876992
 970 0588 00700040 		.word	1073770496
 971              	.L64:
 651:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       {
 652:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 972              		.loc 1 652 0
 973 058c FFF7FEFF 		bl	HAL_GetTick
 974 0590 0246     		mov	r2, r0
 975 0592 BB6A     		ldr	r3, [r7, #40]
 976 0594 D31A     		subs	r3, r2, r3
 977 0596 41F28832 		movw	r2, #5000
 978 059a 9342     		cmp	r3, r2
 979 059c 01D9     		bls	.L63
 653:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         {
 654:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****           return HAL_TIMEOUT;
 980              		.loc 1 654 0
 981 059e 0323     		movs	r3, #3
 982 05a0 AEE0     		b	.L10
 983              	.L63:
 650:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       {
 984              		.loc 1 650 0
 985 05a2 594B     		ldr	r3, .L80
 986 05a4 D3F89030 		ldr	r3, [r3, #144]
 987 05a8 03F00203 		and	r3, r3, #2
 988 05ac 002B     		cmp	r3, #0
 989 05ae EDD1     		bne	.L64
 990              	.L62:
 655:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         }
 656:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       }
 657:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     }
 658:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
 659:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     /* Restore clock configuration if changed */
 660:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     if(pwrclkchanged == SET)
 991              		.loc 1 660 0
 992 05b0 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 993 05b4 012B     		cmp	r3, #1
 994 05b6 05D1     		bne	.L51
 661:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     {
 662:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       __HAL_RCC_PWR_CLK_DISABLE();
 995              		.loc 1 662 0
 996 05b8 534A     		ldr	r2, .L80
 997 05ba 534B     		ldr	r3, .L80
 998 05bc 9B6D     		ldr	r3, [r3, #88]
 999 05be 23F08053 		bic	r3, r3, #268435456
 1000 05c2 9365     		str	r3, [r2, #88]
 1001              	.L51:
 1002              	.LBE52:
 663:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     }
ARM GAS  /tmp/ccWowvEN.s 			page 40


 664:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   }
 665:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** #if defined(RCC_HSI48_SUPPORT)
 666:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   /*------------------------------ HSI48 Configuration -----------------------*/
 667:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 668:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   {
 669:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     /* Check the parameters */
 670:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
 671:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
 672:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     /* Check the LSI State */
 673:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 674:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     {
 675:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       /* Enable the Internal Low Speed oscillator (HSI48). */
 676:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       __HAL_RCC_HSI48_ENABLE();
 677:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
 678:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       /* Get Start Tick*/
 679:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       tickstart = HAL_GetTick();
 680:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
 681:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       /* Wait till HSI48 is ready */
 682:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == RESET)
 683:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       {
 684:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 685:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         {
 686:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****           return HAL_TIMEOUT;
 687:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         }
 688:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       }
 689:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     }
 690:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     else
 691:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     {
 692:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       /* Disable the Internal Low Speed oscillator (HSI48). */
 693:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       __HAL_RCC_HSI48_DISABLE();
 694:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
 695:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       /* Get Start Tick*/
 696:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       tickstart = HAL_GetTick();
 697:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
 698:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       /* Wait till HSI48 is disabled */
 699:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != RESET)
 700:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       {
 701:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 702:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         {
 703:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****           return HAL_TIMEOUT;
 704:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         }
 705:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       }
 706:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     }
 707:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   }
 708:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** #endif /* RCC_HSI48_SUPPORT */
 709:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   /*-------------------------------- PLL Configuration -----------------------*/
 710:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   /* Check the parameters */
 711:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 712:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
 713:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 1003              		.loc 1 713 0
 1004 05c4 7B68     		ldr	r3, [r7, #4]
 1005 05c6 9B6A     		ldr	r3, [r3, #40]
 1006 05c8 002B     		cmp	r3, #0
 1007 05ca 00F09880 		beq	.L65
 714:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   {
 715:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     /* Check if the PLL is used as system clock or not */
ARM GAS  /tmp/ccWowvEN.s 			page 41


 716:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 1008              		.loc 1 716 0
 1009 05ce 4E4B     		ldr	r3, .L80
 1010 05d0 9B68     		ldr	r3, [r3, #8]
 1011 05d2 03F00C03 		and	r3, r3, #12
 1012 05d6 0C2B     		cmp	r3, #12
 1013 05d8 00F08F80 		beq	.L66
 717:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     {
 718:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 1014              		.loc 1 718 0
 1015 05dc 7B68     		ldr	r3, [r7, #4]
 1016 05de 9B6A     		ldr	r3, [r3, #40]
 1017 05e0 022B     		cmp	r3, #2
 1018 05e2 56D1     		bne	.L67
 719:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       {
 720:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         /* Check the parameters */
 721:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 722:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 723:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 724:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 725:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 726:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 727:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
 728:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         /* Disable the main PLL. */
 729:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         __HAL_RCC_PLL_DISABLE();
 1019              		.loc 1 729 0
 1020 05e4 484A     		ldr	r2, .L80
 1021 05e6 484B     		ldr	r3, .L80
 1022 05e8 1B68     		ldr	r3, [r3]
 1023 05ea 23F08073 		bic	r3, r3, #16777216
 1024 05ee 1360     		str	r3, [r2]
 730:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
 731:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         /* Get Start Tick*/
 732:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 1025              		.loc 1 732 0
 1026 05f0 FFF7FEFF 		bl	HAL_GetTick
 1027 05f4 B862     		str	r0, [r7, #40]
 733:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
 734:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         /* Wait till PLL is ready */
 735:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 1028              		.loc 1 735 0
 1029 05f6 08E0     		b	.L68
 1030              	.L69:
 736:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         {
 737:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 1031              		.loc 1 737 0
 1032 05f8 FFF7FEFF 		bl	HAL_GetTick
 1033 05fc 0246     		mov	r2, r0
 1034 05fe BB6A     		ldr	r3, [r7, #40]
 1035 0600 D31A     		subs	r3, r2, r3
 1036 0602 022B     		cmp	r3, #2
 1037 0604 01D9     		bls	.L68
 738:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****           {
 739:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****             return HAL_TIMEOUT;
 1038              		.loc 1 739 0
 1039 0606 0323     		movs	r3, #3
 1040 0608 7AE0     		b	.L10
ARM GAS  /tmp/ccWowvEN.s 			page 42


 1041              	.L68:
 735:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         {
 1042              		.loc 1 735 0
 1043 060a 3F4B     		ldr	r3, .L80
 1044 060c 1B68     		ldr	r3, [r3]
 1045 060e 03F00073 		and	r3, r3, #33554432
 1046 0612 002B     		cmp	r3, #0
 1047 0614 F0D1     		bne	.L69
 740:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****           }
 741:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         }
 742:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
 743:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         /* Configure the main PLL clock source, multiplication and division factors. */
 744:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 1048              		.loc 1 744 0
 1049 0616 3C49     		ldr	r1, .L80
 1050 0618 7B68     		ldr	r3, [r7, #4]
 1051 061a 1B6B     		ldr	r3, [r3, #48]
 1052 061c 013B     		subs	r3, r3, #1
 1053 061e 1A01     		lsls	r2, r3, #4
 1054 0620 7B68     		ldr	r3, [r7, #4]
 1055 0622 5B6B     		ldr	r3, [r3, #52]
 1056 0624 1B02     		lsls	r3, r3, #8
 1057 0626 1A43     		orrs	r2, r2, r3
 1058 0628 7B68     		ldr	r3, [r7, #4]
 1059 062a 9B6B     		ldr	r3, [r3, #56]
 1060 062c 1B09     		lsrs	r3, r3, #4
 1061 062e 5B04     		lsls	r3, r3, #17
 1062 0630 1A43     		orrs	r2, r2, r3
 1063 0632 7B68     		ldr	r3, [r7, #4]
 1064 0634 DB6A     		ldr	r3, [r3, #44]
 1065 0636 1A43     		orrs	r2, r2, r3
 1066 0638 7B68     		ldr	r3, [r7, #4]
 1067 063a DB6B     		ldr	r3, [r3, #60]
 1068 063c 5B08     		lsrs	r3, r3, #1
 1069 063e 013B     		subs	r3, r3, #1
 1070 0640 5B05     		lsls	r3, r3, #21
 1071 0642 1A43     		orrs	r2, r2, r3
 1072 0644 7B68     		ldr	r3, [r7, #4]
 1073 0646 1B6C     		ldr	r3, [r3, #64]
 1074 0648 5B08     		lsrs	r3, r3, #1
 1075 064a 013B     		subs	r3, r3, #1
 1076 064c 5B06     		lsls	r3, r3, #25
 1077 064e 1343     		orrs	r3, r3, r2
 1078 0650 CB60     		str	r3, [r1, #12]
 745:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****                              RCC_OscInitStruct->PLL.PLLM,
 746:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****                              RCC_OscInitStruct->PLL.PLLN,
 747:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****                              RCC_OscInitStruct->PLL.PLLP,
 748:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****                              RCC_OscInitStruct->PLL.PLLQ,
 749:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****                              RCC_OscInitStruct->PLL.PLLR);
 750:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
 751:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         /* Enable the main PLL. */
 752:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         __HAL_RCC_PLL_ENABLE();
 1079              		.loc 1 752 0
 1080 0652 2D4A     		ldr	r2, .L80
 1081 0654 2C4B     		ldr	r3, .L80
 1082 0656 1B68     		ldr	r3, [r3]
 1083 0658 43F08073 		orr	r3, r3, #16777216
ARM GAS  /tmp/ccWowvEN.s 			page 43


 1084 065c 1360     		str	r3, [r2]
 753:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
 754:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         /* Enable PLL System Clock output. */
 755:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 1085              		.loc 1 755 0
 1086 065e 2A4A     		ldr	r2, .L80
 1087 0660 294B     		ldr	r3, .L80
 1088 0662 DB68     		ldr	r3, [r3, #12]
 1089 0664 43F08073 		orr	r3, r3, #16777216
 1090 0668 D360     		str	r3, [r2, #12]
 756:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
 757:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         /* Get Start Tick*/
 758:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 1091              		.loc 1 758 0
 1092 066a FFF7FEFF 		bl	HAL_GetTick
 1093 066e B862     		str	r0, [r7, #40]
 759:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
 760:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         /* Wait till PLL is ready */
 761:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 1094              		.loc 1 761 0
 1095 0670 08E0     		b	.L70
 1096              	.L71:
 762:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         {
 763:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 1097              		.loc 1 763 0
 1098 0672 FFF7FEFF 		bl	HAL_GetTick
 1099 0676 0246     		mov	r2, r0
 1100 0678 BB6A     		ldr	r3, [r7, #40]
 1101 067a D31A     		subs	r3, r2, r3
 1102 067c 022B     		cmp	r3, #2
 1103 067e 01D9     		bls	.L70
 764:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****           {
 765:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****             return HAL_TIMEOUT;
 1104              		.loc 1 765 0
 1105 0680 0323     		movs	r3, #3
 1106 0682 3DE0     		b	.L10
 1107              	.L70:
 761:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         {
 1108              		.loc 1 761 0
 1109 0684 204B     		ldr	r3, .L80
 1110 0686 1B68     		ldr	r3, [r3]
 1111 0688 03F00073 		and	r3, r3, #33554432
 1112 068c 002B     		cmp	r3, #0
 1113 068e F0D0     		beq	.L71
 1114 0690 35E0     		b	.L65
 1115              	.L67:
 766:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****           }
 767:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         }
 768:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       }
 769:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       else
 770:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       {
 771:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         /* Disable the main PLL. */
 772:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         __HAL_RCC_PLL_DISABLE();
 1116              		.loc 1 772 0
 1117 0692 1D4A     		ldr	r2, .L80
 1118 0694 1C4B     		ldr	r3, .L80
 1119 0696 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccWowvEN.s 			page 44


 1120 0698 23F08073 		bic	r3, r3, #16777216
 1121 069c 1360     		str	r3, [r2]
 773:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
 774:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         /* Disable all PLL outputs to save power if no PLLs on */
 775:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 1122              		.loc 1 775 0
 1123 069e 1A4B     		ldr	r3, .L80
 1124 06a0 1B68     		ldr	r3, [r3]
 1125 06a2 03F00063 		and	r3, r3, #134217728
 1126 06a6 002B     		cmp	r3, #0
 1127 06a8 0BD1     		bne	.L72
 776:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** #if defined(RCC_PLLSAI2_SUPPORT)
 777:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****            && 
 778:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****            (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RESET)
 1128              		.loc 1 778 0
 1129 06aa 174B     		ldr	r3, .L80
 1130 06ac 1B68     		ldr	r3, [r3]
 1131 06ae 03F00053 		and	r3, r3, #536870912
 777:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****            (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RESET)
 1132              		.loc 1 777 0
 1133 06b2 002B     		cmp	r3, #0
 1134 06b4 05D1     		bne	.L72
 779:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** #endif /* RCC_PLLSAI2_SUPPORT */
 780:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****           )
 781:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         {  
 782:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****           MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 1135              		.loc 1 782 0
 1136 06b6 144A     		ldr	r2, .L80
 1137 06b8 134B     		ldr	r3, .L80
 1138 06ba DB68     		ldr	r3, [r3, #12]
 1139 06bc 23F00303 		bic	r3, r3, #3
 1140 06c0 D360     		str	r3, [r2, #12]
 1141              	.L72:
 783:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         }
 784:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         
 785:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** #if defined(RCC_PLLSAI2_SUPPORT)
 786:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 1142              		.loc 1 786 0
 1143 06c2 114A     		ldr	r2, .L80
 1144 06c4 104B     		ldr	r3, .L80
 1145 06c6 DB68     		ldr	r3, [r3, #12]
 1146 06c8 23F08873 		bic	r3, r3, #17825792
 1147 06cc 23F48033 		bic	r3, r3, #65536
 1148 06d0 D360     		str	r3, [r2, #12]
 787:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** #else
 788:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 789:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** #endif /* RCC_PLLSAI2_SUPPORT */
 790:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
 791:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         /* Get Start Tick*/
 792:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 1149              		.loc 1 792 0
 1150 06d2 FFF7FEFF 		bl	HAL_GetTick
 1151 06d6 B862     		str	r0, [r7, #40]
 793:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
 794:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         /* Wait till PLL is disabled */
 795:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 1152              		.loc 1 795 0
ARM GAS  /tmp/ccWowvEN.s 			page 45


 1153 06d8 08E0     		b	.L73
 1154              	.L74:
 796:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         {
 797:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 1155              		.loc 1 797 0
 1156 06da FFF7FEFF 		bl	HAL_GetTick
 1157 06de 0246     		mov	r2, r0
 1158 06e0 BB6A     		ldr	r3, [r7, #40]
 1159 06e2 D31A     		subs	r3, r2, r3
 1160 06e4 022B     		cmp	r3, #2
 1161 06e6 01D9     		bls	.L73
 798:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****           {
 799:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****             return HAL_TIMEOUT;
 1162              		.loc 1 799 0
 1163 06e8 0323     		movs	r3, #3
 1164 06ea 09E0     		b	.L10
 1165              	.L73:
 795:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         {
 1166              		.loc 1 795 0
 1167 06ec 064B     		ldr	r3, .L80
 1168 06ee 1B68     		ldr	r3, [r3]
 1169 06f0 03F00073 		and	r3, r3, #33554432
 1170 06f4 002B     		cmp	r3, #0
 1171 06f6 F0D1     		bne	.L74
 1172 06f8 01E0     		b	.L65
 1173              	.L66:
 800:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****           }
 801:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         }
 802:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       }
 803:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     }
 804:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     else
 805:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     {
 806:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       return HAL_ERROR;
 1174              		.loc 1 806 0
 1175 06fa 0123     		movs	r3, #1
 1176 06fc 00E0     		b	.L10
 1177              	.L65:
 807:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     }
 808:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   }
 809:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   return HAL_OK;
 1178              		.loc 1 809 0
 1179 06fe 0023     		movs	r3, #0
 1180              	.L10:
 810:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** }
 1181              		.loc 1 810 0
 1182 0700 1846     		mov	r0, r3
 1183 0702 3037     		adds	r7, r7, #48
 1184              	.LCFI7:
 1185              		.cfi_def_cfa_offset 8
 1186 0704 BD46     		mov	sp, r7
 1187              	.LCFI8:
 1188              		.cfi_def_cfa_register 13
 1189              		@ sp needed
 1190 0706 80BD     		pop	{r7, pc}
 1191              	.L81:
 1192              		.align	2
 1193              	.L80:
ARM GAS  /tmp/ccWowvEN.s 			page 46


 1194 0708 00100240 		.word	1073876992
 1195              		.cfi_endproc
 1196              	.LFE127:
 1198              		.section	.text.HAL_RCC_ClockConfig,"ax",%progbits
 1199              		.align	1
 1200              		.global	HAL_RCC_ClockConfig
 1201              		.syntax unified
 1202              		.thumb
 1203              		.thumb_func
 1204              		.fpu fpv4-sp-d16
 1206              	HAL_RCC_ClockConfig:
 1207              	.LFB128:
 811:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
 812:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** /**
 813:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   * @brief  Initialize the CPU, AHB and APB busses clocks according to the specified
 814:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   *         parameters in the RCC_ClkInitStruct.
 815:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   * @param  RCC_ClkInitStruct  pointer to an RCC_OscInitTypeDef structure that
 816:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   *         contains the configuration information for the RCC peripheral.
 817:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   * @param  FLatency  FLASH Latency
 818:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   *          This parameter can be one of the following values:
 819:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   *            @arg FLASH_LATENCY_0   FLASH 0 Latency cycle
 820:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   *            @arg FLASH_LATENCY_1   FLASH 1 Latency cycle
 821:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   *            @arg FLASH_LATENCY_2   FLASH 2 Latency cycle
 822:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   *            @arg FLASH_LATENCY_3   FLASH 3 Latency cycle
 823:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   *            @arg FLASH_LATENCY_4   FLASH 4 Latency cycle
 824:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   *
 825:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
 826:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   *         and updated by HAL_RCC_GetHCLKFreq() function called within this function
 827:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   *
 828:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   * @note   The MSI is used by default as system clock source after
 829:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   *         startup from Reset, wake-up from STANDBY mode. After restart from Reset,
 830:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   *         the MSI frequency is set to its default value 4 MHz.
 831:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   *
 832:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   * @note   The HSI can be selected as system clock source after
 833:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   *         from STOP modes or in case of failure of the HSE used directly or indirectly 
 834:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   *         as system clock (if the Clock Security System CSS is enabled).
 835:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   *
 836:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   * @note   A switch from one clock source to another occurs only if the target
 837:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   *         clock source is ready (clock stable after startup delay or PLL locked).
 838:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   *         If a clock source which is not yet ready is selected, the switch will
 839:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   *         occur when the clock source is ready.
 840:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   *
 841:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   * @note   You can use HAL_RCC_GetClockConfig() function to know which clock is
 842:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   *         currently used as system clock source.
 843:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   *
 844:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   * @note   Depending on the device voltage range, the software has to set correctly
 845:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
 846:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   *         (for more details refer to section above "Initialization/de-initialization functions")
 847:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   * @retval None
 848:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   */
 849:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
 850:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** {
 1208              		.loc 1 850 0
 1209              		.cfi_startproc
 1210              		@ args = 0, pretend = 0, frame = 24
 1211              		@ frame_needed = 1, uses_anonymous_args = 0
 1212 0000 80B5     		push	{r7, lr}
ARM GAS  /tmp/ccWowvEN.s 			page 47


 1213              	.LCFI9:
 1214              		.cfi_def_cfa_offset 8
 1215              		.cfi_offset 7, -8
 1216              		.cfi_offset 14, -4
 1217 0002 86B0     		sub	sp, sp, #24
 1218              	.LCFI10:
 1219              		.cfi_def_cfa_offset 32
 1220 0004 00AF     		add	r7, sp, #0
 1221              	.LCFI11:
 1222              		.cfi_def_cfa_register 7
 1223 0006 7860     		str	r0, [r7, #4]
 1224 0008 3960     		str	r1, [r7]
 851:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   uint32_t tickstart = 0;
 1225              		.loc 1 851 0
 1226 000a 0023     		movs	r3, #0
 1227 000c 7B61     		str	r3, [r7, #20]
 852:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
 853:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   /* Check the parameters */
 854:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   assert_param(RCC_ClkInitStruct != NULL);
 855:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 856:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   assert_param(IS_FLASH_LATENCY(FLatency));
 857:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
 858:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
 859:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     must be correctly programmed according to the frequency of the CPU clock
 860:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     (HCLK) and the supply voltage of the device. */
 861:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
 862:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   /* Increasing the number of wait states because of higher CPU frequency */
 863:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 1228              		.loc 1 863 0
 1229 000e 894B     		ldr	r3, .L106
 1230 0010 1B68     		ldr	r3, [r3]
 1231 0012 03F00702 		and	r2, r3, #7
 1232 0016 3B68     		ldr	r3, [r7]
 1233 0018 9A42     		cmp	r2, r3
 1234 001a 10D2     		bcs	.L83
 864:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   {
 865:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
 866:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     __HAL_FLASH_SET_LATENCY(FLatency);
 1235              		.loc 1 866 0
 1236 001c 8549     		ldr	r1, .L106
 1237 001e 854B     		ldr	r3, .L106
 1238 0020 1B68     		ldr	r3, [r3]
 1239 0022 23F00702 		bic	r2, r3, #7
 1240 0026 3B68     		ldr	r3, [r7]
 1241 0028 1343     		orrs	r3, r3, r2
 1242 002a 0B60     		str	r3, [r1]
 867:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
 868:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     /* Check that the new number of wait states is taken into account to access the Flash
 869:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     memory by reading the FLASH_ACR register */
 870:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 1243              		.loc 1 870 0
 1244 002c 814B     		ldr	r3, .L106
 1245 002e 1B68     		ldr	r3, [r3]
 1246 0030 03F00702 		and	r2, r3, #7
 1247 0034 3B68     		ldr	r3, [r7]
 1248 0036 9A42     		cmp	r2, r3
 1249 0038 01D0     		beq	.L83
ARM GAS  /tmp/ccWowvEN.s 			page 48


 871:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     {
 872:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       return HAL_ERROR;
 1250              		.loc 1 872 0
 1251 003a 0123     		movs	r3, #1
 1252 003c F6E0     		b	.L84
 1253              	.L83:
 873:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     }
 874:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   }
 875:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
 876:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   /*-------------------------- HCLK Configuration --------------------------*/
 877:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 1254              		.loc 1 877 0
 1255 003e 7B68     		ldr	r3, [r7, #4]
 1256 0040 1B68     		ldr	r3, [r3]
 1257 0042 03F00203 		and	r3, r3, #2
 1258 0046 002B     		cmp	r3, #0
 1259 0048 08D0     		beq	.L85
 878:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   {
 879:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 880:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 1260              		.loc 1 880 0
 1261 004a 7B49     		ldr	r1, .L106+4
 1262 004c 7A4B     		ldr	r3, .L106+4
 1263 004e 9B68     		ldr	r3, [r3, #8]
 1264 0050 23F0F002 		bic	r2, r3, #240
 1265 0054 7B68     		ldr	r3, [r7, #4]
 1266 0056 9B68     		ldr	r3, [r3, #8]
 1267 0058 1343     		orrs	r3, r3, r2
 1268 005a 8B60     		str	r3, [r1, #8]
 1269              	.L85:
 881:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   }
 882:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
 883:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   /*------------------------- SYSCLK Configuration ---------------------------*/
 884:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 1270              		.loc 1 884 0
 1271 005c 7B68     		ldr	r3, [r7, #4]
 1272 005e 1B68     		ldr	r3, [r3]
 1273 0060 03F00103 		and	r3, r3, #1
 1274 0064 002B     		cmp	r3, #0
 1275 0066 00F08E80 		beq	.L86
 885:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   {
 886:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 887:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
 888:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     /* HSE is selected as System Clock Source */
 889:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 1276              		.loc 1 889 0
 1277 006a 7B68     		ldr	r3, [r7, #4]
 1278 006c 5B68     		ldr	r3, [r3, #4]
 1279 006e 022B     		cmp	r3, #2
 1280 0070 07D1     		bne	.L87
 890:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     {
 891:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       /* Check the HSE ready flag */
 892:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 1281              		.loc 1 892 0
 1282 0072 714B     		ldr	r3, .L106+4
 1283 0074 1B68     		ldr	r3, [r3]
 1284 0076 03F40033 		and	r3, r3, #131072
ARM GAS  /tmp/ccWowvEN.s 			page 49


 1285 007a 002B     		cmp	r3, #0
 1286 007c 21D1     		bne	.L88
 893:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       {
 894:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         return HAL_ERROR;
 1287              		.loc 1 894 0
 1288 007e 0123     		movs	r3, #1
 1289 0080 D4E0     		b	.L84
 1290              	.L87:
 895:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       }
 896:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     }
 897:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     /* PLL is selected as System Clock Source */
 898:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 1291              		.loc 1 898 0
 1292 0082 7B68     		ldr	r3, [r7, #4]
 1293 0084 5B68     		ldr	r3, [r3, #4]
 1294 0086 032B     		cmp	r3, #3
 1295 0088 07D1     		bne	.L89
 899:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     {
 900:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       /* Check the PLL ready flag */
 901:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 1296              		.loc 1 901 0
 1297 008a 6B4B     		ldr	r3, .L106+4
 1298 008c 1B68     		ldr	r3, [r3]
 1299 008e 03F00073 		and	r3, r3, #33554432
 1300 0092 002B     		cmp	r3, #0
 1301 0094 15D1     		bne	.L88
 902:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       {
 903:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         return HAL_ERROR;
 1302              		.loc 1 903 0
 1303 0096 0123     		movs	r3, #1
 1304 0098 C8E0     		b	.L84
 1305              	.L89:
 904:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       }
 905:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     }
 906:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     /* MSI is selected as System Clock Source */
 907:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 1306              		.loc 1 907 0
 1307 009a 7B68     		ldr	r3, [r7, #4]
 1308 009c 5B68     		ldr	r3, [r3, #4]
 1309 009e 002B     		cmp	r3, #0
 1310 00a0 07D1     		bne	.L90
 908:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     {
 909:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       /* Check the MSI ready flag */
 910:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 1311              		.loc 1 910 0
 1312 00a2 654B     		ldr	r3, .L106+4
 1313 00a4 1B68     		ldr	r3, [r3]
 1314 00a6 03F00203 		and	r3, r3, #2
 1315 00aa 002B     		cmp	r3, #0
 1316 00ac 09D1     		bne	.L88
 911:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       {
 912:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         return HAL_ERROR;
 1317              		.loc 1 912 0
 1318 00ae 0123     		movs	r3, #1
 1319 00b0 BCE0     		b	.L84
 1320              	.L90:
 913:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       }
ARM GAS  /tmp/ccWowvEN.s 			page 50


 914:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     }
 915:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     /* HSI is selected as System Clock Source */
 916:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     else
 917:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     {
 918:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       /* Check the HSI ready flag */
 919:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 1321              		.loc 1 919 0
 1322 00b2 614B     		ldr	r3, .L106+4
 1323 00b4 1B68     		ldr	r3, [r3]
 1324 00b6 03F48063 		and	r3, r3, #1024
 1325 00ba 002B     		cmp	r3, #0
 1326 00bc 01D1     		bne	.L88
 920:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       {
 921:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         return HAL_ERROR;
 1327              		.loc 1 921 0
 1328 00be 0123     		movs	r3, #1
 1329 00c0 B4E0     		b	.L84
 1330              	.L88:
 922:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       }
 923:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     }
 924:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 1331              		.loc 1 924 0
 1332 00c2 5D49     		ldr	r1, .L106+4
 1333 00c4 5C4B     		ldr	r3, .L106+4
 1334 00c6 9B68     		ldr	r3, [r3, #8]
 1335 00c8 23F00302 		bic	r2, r3, #3
 1336 00cc 7B68     		ldr	r3, [r7, #4]
 1337 00ce 5B68     		ldr	r3, [r3, #4]
 1338 00d0 1343     		orrs	r3, r3, r2
 1339 00d2 8B60     		str	r3, [r1, #8]
 925:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
 926:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     /* Get Start Tick*/
 927:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     tickstart = HAL_GetTick();
 1340              		.loc 1 927 0
 1341 00d4 FFF7FEFF 		bl	HAL_GetTick
 1342 00d8 7861     		str	r0, [r7, #20]
 928:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
 929:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 1343              		.loc 1 929 0
 1344 00da 7B68     		ldr	r3, [r7, #4]
 1345 00dc 5B68     		ldr	r3, [r3, #4]
 1346 00de 022B     		cmp	r3, #2
 1347 00e0 12D1     		bne	.L91
 930:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     {
 931:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 1348              		.loc 1 931 0
 1349 00e2 0AE0     		b	.L92
 1350              	.L93:
 932:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       {
 933:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 1351              		.loc 1 933 0
 1352 00e4 FFF7FEFF 		bl	HAL_GetTick
 1353 00e8 0246     		mov	r2, r0
 1354 00ea 7B69     		ldr	r3, [r7, #20]
 1355 00ec D31A     		subs	r3, r2, r3
 1356 00ee 41F28832 		movw	r2, #5000
 1357 00f2 9342     		cmp	r3, r2
ARM GAS  /tmp/ccWowvEN.s 			page 51


 1358 00f4 01D9     		bls	.L92
 934:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         {
 935:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****           return HAL_TIMEOUT;
 1359              		.loc 1 935 0
 1360 00f6 0323     		movs	r3, #3
 1361 00f8 98E0     		b	.L84
 1362              	.L92:
 931:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       {
 1363              		.loc 1 931 0
 1364 00fa 4F4B     		ldr	r3, .L106+4
 1365 00fc 9B68     		ldr	r3, [r3, #8]
 1366 00fe 03F00C03 		and	r3, r3, #12
 1367 0102 082B     		cmp	r3, #8
 1368 0104 EED1     		bne	.L93
 1369 0106 3EE0     		b	.L86
 1370              	.L91:
 936:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         }
 937:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       }
 938:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     }
 939:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 1371              		.loc 1 939 0
 1372 0108 7B68     		ldr	r3, [r7, #4]
 1373 010a 5B68     		ldr	r3, [r3, #4]
 1374 010c 032B     		cmp	r3, #3
 1375 010e 12D1     		bne	.L94
 940:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     {
 941:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 1376              		.loc 1 941 0
 1377 0110 0AE0     		b	.L95
 1378              	.L96:
 942:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       {
 943:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 1379              		.loc 1 943 0
 1380 0112 FFF7FEFF 		bl	HAL_GetTick
 1381 0116 0246     		mov	r2, r0
 1382 0118 7B69     		ldr	r3, [r7, #20]
 1383 011a D31A     		subs	r3, r2, r3
 1384 011c 41F28832 		movw	r2, #5000
 1385 0120 9342     		cmp	r3, r2
 1386 0122 01D9     		bls	.L95
 944:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         {
 945:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****           return HAL_TIMEOUT;
 1387              		.loc 1 945 0
 1388 0124 0323     		movs	r3, #3
 1389 0126 81E0     		b	.L84
 1390              	.L95:
 941:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       {
 1391              		.loc 1 941 0
 1392 0128 434B     		ldr	r3, .L106+4
 1393 012a 9B68     		ldr	r3, [r3, #8]
 1394 012c 03F00C03 		and	r3, r3, #12
 1395 0130 0C2B     		cmp	r3, #12
 1396 0132 EED1     		bne	.L96
 1397 0134 27E0     		b	.L86
 1398              	.L94:
 946:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         }
 947:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       }
ARM GAS  /tmp/ccWowvEN.s 			page 52


 948:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     }
 949:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 1399              		.loc 1 949 0
 1400 0136 7B68     		ldr	r3, [r7, #4]
 1401 0138 5B68     		ldr	r3, [r3, #4]
 1402 013a 002B     		cmp	r3, #0
 1403 013c 1DD1     		bne	.L100
 950:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     {
 951:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_MSI)
 1404              		.loc 1 951 0
 1405 013e 0AE0     		b	.L98
 1406              	.L99:
 952:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       {
 953:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 1407              		.loc 1 953 0
 1408 0140 FFF7FEFF 		bl	HAL_GetTick
 1409 0144 0246     		mov	r2, r0
 1410 0146 7B69     		ldr	r3, [r7, #20]
 1411 0148 D31A     		subs	r3, r2, r3
 1412 014a 41F28832 		movw	r2, #5000
 1413 014e 9342     		cmp	r3, r2
 1414 0150 01D9     		bls	.L98
 954:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         {
 955:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****           return HAL_TIMEOUT;
 1415              		.loc 1 955 0
 1416 0152 0323     		movs	r3, #3
 1417 0154 6AE0     		b	.L84
 1418              	.L98:
 951:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       {
 1419              		.loc 1 951 0
 1420 0156 384B     		ldr	r3, .L106+4
 1421 0158 9B68     		ldr	r3, [r3, #8]
 1422 015a 03F00C03 		and	r3, r3, #12
 1423 015e 002B     		cmp	r3, #0
 1424 0160 EED1     		bne	.L99
 1425 0162 10E0     		b	.L86
 1426              	.L101:
 956:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         }
 957:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       }
 958:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     }
 959:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     else
 960:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     {
 961:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
 962:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       {
 963:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 1427              		.loc 1 963 0
 1428 0164 FFF7FEFF 		bl	HAL_GetTick
 1429 0168 0246     		mov	r2, r0
 1430 016a 7B69     		ldr	r3, [r7, #20]
 1431 016c D31A     		subs	r3, r2, r3
 1432 016e 41F28832 		movw	r2, #5000
 1433 0172 9342     		cmp	r3, r2
 1434 0174 01D9     		bls	.L100
 964:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         {
 965:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****           return HAL_TIMEOUT;
 1435              		.loc 1 965 0
 1436 0176 0323     		movs	r3, #3
ARM GAS  /tmp/ccWowvEN.s 			page 53


 1437 0178 58E0     		b	.L84
 1438              	.L100:
 961:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       {
 1439              		.loc 1 961 0
 1440 017a 2F4B     		ldr	r3, .L106+4
 1441 017c 9B68     		ldr	r3, [r3, #8]
 1442 017e 03F00C03 		and	r3, r3, #12
 1443 0182 042B     		cmp	r3, #4
 1444 0184 EED1     		bne	.L101
 1445              	.L86:
 966:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         }
 967:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       }
 968:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     }
 969:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   }
 970:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   
 971:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   /* Decreasing the number of wait states because of lower CPU frequency */
 972:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 1446              		.loc 1 972 0
 1447 0186 2B4B     		ldr	r3, .L106
 1448 0188 1B68     		ldr	r3, [r3]
 1449 018a 03F00702 		and	r2, r3, #7
 1450 018e 3B68     		ldr	r3, [r7]
 1451 0190 9A42     		cmp	r2, r3
 1452 0192 10D9     		bls	.L102
 973:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   {
 974:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
 975:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     __HAL_FLASH_SET_LATENCY(FLatency);
 1453              		.loc 1 975 0
 1454 0194 2749     		ldr	r1, .L106
 1455 0196 274B     		ldr	r3, .L106
 1456 0198 1B68     		ldr	r3, [r3]
 1457 019a 23F00702 		bic	r2, r3, #7
 1458 019e 3B68     		ldr	r3, [r7]
 1459 01a0 1343     		orrs	r3, r3, r2
 1460 01a2 0B60     		str	r3, [r1]
 976:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
 977:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     /* Check that the new number of wait states is taken into account to access the Flash
 978:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     memory by reading the FLASH_ACR register */
 979:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 1461              		.loc 1 979 0
 1462 01a4 234B     		ldr	r3, .L106
 1463 01a6 1B68     		ldr	r3, [r3]
 1464 01a8 03F00702 		and	r2, r3, #7
 1465 01ac 3B68     		ldr	r3, [r7]
 1466 01ae 9A42     		cmp	r2, r3
 1467 01b0 01D0     		beq	.L102
 980:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     {
 981:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       return HAL_ERROR;
 1468              		.loc 1 981 0
 1469 01b2 0123     		movs	r3, #1
 1470 01b4 3AE0     		b	.L84
 1471              	.L102:
 982:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     }
 983:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   }
 984:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   
 985:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   /*-------------------------- PCLK1 Configuration ---------------------------*/
 986:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
ARM GAS  /tmp/ccWowvEN.s 			page 54


 1472              		.loc 1 986 0
 1473 01b6 7B68     		ldr	r3, [r7, #4]
 1474 01b8 1B68     		ldr	r3, [r3]
 1475 01ba 03F00403 		and	r3, r3, #4
 1476 01be 002B     		cmp	r3, #0
 1477 01c0 08D0     		beq	.L103
 987:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   {
 988:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 989:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 1478              		.loc 1 989 0
 1479 01c2 1D49     		ldr	r1, .L106+4
 1480 01c4 1C4B     		ldr	r3, .L106+4
 1481 01c6 9B68     		ldr	r3, [r3, #8]
 1482 01c8 23F4E062 		bic	r2, r3, #1792
 1483 01cc 7B68     		ldr	r3, [r7, #4]
 1484 01ce DB68     		ldr	r3, [r3, #12]
 1485 01d0 1343     		orrs	r3, r3, r2
 1486 01d2 8B60     		str	r3, [r1, #8]
 1487              	.L103:
 990:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   }
 991:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
 992:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   /*-------------------------- PCLK2 Configuration ---------------------------*/
 993:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 1488              		.loc 1 993 0
 1489 01d4 7B68     		ldr	r3, [r7, #4]
 1490 01d6 1B68     		ldr	r3, [r3]
 1491 01d8 03F00803 		and	r3, r3, #8
 1492 01dc 002B     		cmp	r3, #0
 1493 01de 09D0     		beq	.L104
 994:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   {
 995:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 996:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 1494              		.loc 1 996 0
 1495 01e0 1549     		ldr	r1, .L106+4
 1496 01e2 154B     		ldr	r3, .L106+4
 1497 01e4 9B68     		ldr	r3, [r3, #8]
 1498 01e6 23F46052 		bic	r2, r3, #14336
 1499 01ea 7B68     		ldr	r3, [r7, #4]
 1500 01ec 1B69     		ldr	r3, [r3, #16]
 1501 01ee DB00     		lsls	r3, r3, #3
 1502 01f0 1343     		orrs	r3, r3, r2
 1503 01f2 8B60     		str	r3, [r1, #8]
 1504              	.L104:
 997:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   }
 998:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
 999:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   /* Update the SystemCoreClock global variable */
1000:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITI
 1505              		.loc 1 1000 0
 1506 01f4 FFF7FEFF 		bl	HAL_RCC_GetSysClockFreq
 1507 01f8 0146     		mov	r1, r0
 1508 01fa 0F4B     		ldr	r3, .L106+4
 1509 01fc 9B68     		ldr	r3, [r3, #8]
 1510 01fe 03F0F002 		and	r2, r3, #240
 1511 0202 F023     		movs	r3, #240
 1512 0204 3B61     		str	r3, [r7, #16]
 1513              	.LBB54:
 1514              	.LBB55:
ARM GAS  /tmp/ccWowvEN.s 			page 55


 531:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 1515              		.loc 2 531 0
 1516 0206 3B69     		ldr	r3, [r7, #16]
 1517              		.syntax unified
 1518              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1519 0208 93FAA3F3 		rbit r3, r3
 1520              	@ 0 "" 2
 1521              		.thumb
 1522              		.syntax unified
 1523 020c FB60     		str	r3, [r7, #12]
 1524              		.loc 2 544 0
 1525 020e FB68     		ldr	r3, [r7, #12]
 1526              	.LBE55:
 1527              	.LBE54:
 1528              		.loc 1 1000 0
 1529 0210 B3FA83F3 		clz	r3, r3
 1530 0214 22FA03F3 		lsr	r3, r2, r3
 1531 0218 084A     		ldr	r2, .L106+8
 1532 021a D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1533 021c 21FA03F3 		lsr	r3, r1, r3
 1534 0220 074A     		ldr	r2, .L106+12
 1535 0222 1360     		str	r3, [r2]
1001:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
1002:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   /* Configure the source of time base considering new system clocks settings*/
1003:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   HAL_InitTick (TICK_INT_PRIORITY);
 1536              		.loc 1 1003 0
 1537 0224 0020     		movs	r0, #0
 1538 0226 FFF7FEFF 		bl	HAL_InitTick
1004:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
1005:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   return HAL_OK;
 1539              		.loc 1 1005 0
 1540 022a 0023     		movs	r3, #0
 1541              	.L84:
1006:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** }
 1542              		.loc 1 1006 0
 1543 022c 1846     		mov	r0, r3
 1544 022e 1837     		adds	r7, r7, #24
 1545              	.LCFI12:
 1546              		.cfi_def_cfa_offset 8
 1547 0230 BD46     		mov	sp, r7
 1548              	.LCFI13:
 1549              		.cfi_def_cfa_register 13
 1550              		@ sp needed
 1551 0232 80BD     		pop	{r7, pc}
 1552              	.L107:
 1553              		.align	2
 1554              	.L106:
 1555 0234 00200240 		.word	1073881088
 1556 0238 00100240 		.word	1073876992
 1557 023c 00000000 		.word	AHBPrescTable
 1558 0240 00000000 		.word	SystemCoreClock
 1559              		.cfi_endproc
 1560              	.LFE128:
 1562              		.section	.text.HAL_RCC_MCOConfig,"ax",%progbits
 1563              		.align	1
 1564              		.global	HAL_RCC_MCOConfig
 1565              		.syntax unified
ARM GAS  /tmp/ccWowvEN.s 			page 56


 1566              		.thumb
 1567              		.thumb_func
 1568              		.fpu fpv4-sp-d16
 1570              	HAL_RCC_MCOConfig:
 1571              	.LFB129:
1007:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
1008:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** /**
1009:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   * @}
1010:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   */
1011:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
1012:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** /** @defgroup RCC_Exported_Functions_Group2 Peripheral Control functions 
1013:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****  *  @brief   RCC clocks control functions
1014:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****  *
1015:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** @verbatim
1016:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****  ===============================================================================
1017:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****                       ##### Peripheral Control functions #####
1018:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****  ===============================================================================
1019:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     [..]
1020:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     This subsection provides a set of functions allowing to:
1021:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     
1022:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     (+) Ouput clock to MCO pin.
1023:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     (+) Retrieve current clock frequencies.
1024:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     (+) Enable the Clock Security System.
1025:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
1026:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** @endverbatim
1027:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   * @{
1028:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   */
1029:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
1030:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** /**
1031:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   * @brief  Select the clock source to output on MCO pin(PA8).
1032:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   * @note   PA8 should be configured in alternate function mode.
1033:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   * @param  RCC_MCOx  specifies the output direction for the clock source.
1034:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   *          For STM32L4xx family this parameter can have only one value:
1035:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1  Clock source to output on MCO1 pin(PA8).
1036:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   * @param  RCC_MCOSource  specifies the clock source to output.
1037:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   *          This parameter can be one of the following values:
1038:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_NOCLOCK  MCO output disabled, no clock on MCO
1039:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_SYSCLK  system  clock selected as MCO source
1040:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_MSI  MSI clock selected as MCO source
1041:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_HSI  HSI clock selected as MCO source
1042:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_HSE  HSE clock selected as MCO sourcee
1043:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_PLLCLK  main PLL clock selected as MCO source
1044:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_LSI  LSI clock selected as MCO source
1045:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_LSE  LSE clock selected as MCO source
1046:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   @if STM32L443xx
1047:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_HSI48  HSI48 clock selected as MCO source for devices with 
1048:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   @endif
1049:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   * @param  RCC_MCODiv  specifies the MCO prescaler.
1050:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   *          This parameter can be one of the following values:
1051:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   *            @arg @ref RCC_MCODIV_1  no division applied to MCO clock
1052:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   *            @arg @ref RCC_MCODIV_2  division by 2 applied to MCO clock
1053:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   *            @arg @ref RCC_MCODIV_4  division by 4 applied to MCO clock
1054:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
1055:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
1056:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   * @retval None
1057:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   */
1058:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** void HAL_RCC_MCOConfig( uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
ARM GAS  /tmp/ccWowvEN.s 			page 57


1059:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** {
 1572              		.loc 1 1059 0
 1573              		.cfi_startproc
 1574              		@ args = 0, pretend = 0, frame = 40
 1575              		@ frame_needed = 1, uses_anonymous_args = 0
 1576 0000 80B5     		push	{r7, lr}
 1577              	.LCFI14:
 1578              		.cfi_def_cfa_offset 8
 1579              		.cfi_offset 7, -8
 1580              		.cfi_offset 14, -4
 1581 0002 8AB0     		sub	sp, sp, #40
 1582              	.LCFI15:
 1583              		.cfi_def_cfa_offset 48
 1584 0004 00AF     		add	r7, sp, #0
 1585              	.LCFI16:
 1586              		.cfi_def_cfa_register 7
 1587 0006 F860     		str	r0, [r7, #12]
 1588 0008 B960     		str	r1, [r7, #8]
 1589 000a 7A60     		str	r2, [r7, #4]
 1590              	.LBB56:
1060:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   GPIO_InitTypeDef GPIO_InitStruct;
1061:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   /* Check the parameters */
1062:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   assert_param(IS_RCC_MCO(RCC_MCOx));
1063:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   assert_param(IS_RCC_MCODIV(RCC_MCODiv));
1064:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
1065:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
1066:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   /* MCO Clock Enable */
1067:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   __MCO1_CLK_ENABLE();
 1591              		.loc 1 1067 0
 1592 000c 154A     		ldr	r2, .L109
 1593 000e 154B     		ldr	r3, .L109
 1594 0010 DB6C     		ldr	r3, [r3, #76]
 1595 0012 43F00103 		orr	r3, r3, #1
 1596 0016 D364     		str	r3, [r2, #76]
 1597 0018 124B     		ldr	r3, .L109
 1598 001a DB6C     		ldr	r3, [r3, #76]
 1599 001c 03F00103 		and	r3, r3, #1
 1600 0020 3B61     		str	r3, [r7, #16]
 1601 0022 3B69     		ldr	r3, [r7, #16]
 1602              	.LBE56:
1068:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
1069:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   /* Configue the MCO1 pin in alternate function mode */
1070:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   GPIO_InitStruct.Pin = MCO1_PIN;
 1603              		.loc 1 1070 0
 1604 0024 4FF48073 		mov	r3, #256
 1605 0028 7B61     		str	r3, [r7, #20]
1071:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 1606              		.loc 1 1071 0
 1607 002a 0223     		movs	r3, #2
 1608 002c BB61     		str	r3, [r7, #24]
1072:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 1609              		.loc 1 1072 0
 1610 002e 0223     		movs	r3, #2
 1611 0030 3B62     		str	r3, [r7, #32]
1073:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 1612              		.loc 1 1073 0
 1613 0032 0023     		movs	r3, #0
ARM GAS  /tmp/ccWowvEN.s 			page 58


 1614 0034 FB61     		str	r3, [r7, #28]
1074:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 1615              		.loc 1 1074 0
 1616 0036 0023     		movs	r3, #0
 1617 0038 7B62     		str	r3, [r7, #36]
1075:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 1618              		.loc 1 1075 0
 1619 003a 07F11403 		add	r3, r7, #20
 1620 003e 1946     		mov	r1, r3
 1621 0040 4FF09040 		mov	r0, #1207959552
 1622 0044 FFF7FEFF 		bl	HAL_GPIO_Init
1076:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
1077:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   /* Mask MCOSEL[] and MCOPRE[] bits then set MCO1 clock source and prescaler */
1078:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE), (RCC_MCOSource | RCC_MCODiv ));
 1623              		.loc 1 1078 0
 1624 0048 0648     		ldr	r0, .L109
 1625 004a 064B     		ldr	r3, .L109
 1626 004c 9B68     		ldr	r3, [r3, #8]
 1627 004e 23F0EE42 		bic	r2, r3, #1996488704
 1628 0052 B968     		ldr	r1, [r7, #8]
 1629 0054 7B68     		ldr	r3, [r7, #4]
 1630 0056 0B43     		orrs	r3, r3, r1
 1631 0058 1343     		orrs	r3, r3, r2
 1632 005a 8360     		str	r3, [r0, #8]
1079:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** }
 1633              		.loc 1 1079 0
 1634 005c 00BF     		nop
 1635 005e 2837     		adds	r7, r7, #40
 1636              	.LCFI17:
 1637              		.cfi_def_cfa_offset 8
 1638 0060 BD46     		mov	sp, r7
 1639              	.LCFI18:
 1640              		.cfi_def_cfa_register 13
 1641              		@ sp needed
 1642 0062 80BD     		pop	{r7, pc}
 1643              	.L110:
 1644              		.align	2
 1645              	.L109:
 1646 0064 00100240 		.word	1073876992
 1647              		.cfi_endproc
 1648              	.LFE129:
 1650              		.section	.text.HAL_RCC_GetSysClockFreq,"ax",%progbits
 1651              		.align	1
 1652              		.global	HAL_RCC_GetSysClockFreq
 1653              		.syntax unified
 1654              		.thumb
 1655              		.thumb_func
 1656              		.fpu fpv4-sp-d16
 1658              	HAL_RCC_GetSysClockFreq:
 1659              	.LFB130:
1080:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
1081:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** /**
1082:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   * @brief  Return the SYSCLK frequency.
1083:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   *
1084:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   * @note   The system frequency computed by this function is not the real
1085:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   *         frequency in the chip. It is calculated based on the predefined
1086:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   *         constant and the selected clock source:
ARM GAS  /tmp/ccWowvEN.s 			page 59


1087:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   * @note     If SYSCLK source is MSI, function returns values based on MSI
1088:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   *             Value as defined by the MSI range.
1089:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   * @note     If SYSCLK source is HSI, function returns values based on HSI_VALUE(*)
1090:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   * @note     If SYSCLK source is HSE, function returns values based on HSE_VALUE(**)
1091:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   * @note     If SYSCLK source is PLL, function returns values based on HSE_VALUE(**),
1092:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   *           HSI_VALUE(*) or MSI Value multiplied/divided by the PLL factors.
1093:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   * @note     (*) HSI_VALUE is a constant defined in stm32l4xx_hal_conf.h file (default value
1094:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   *               16 MHz) but the real value may vary depending on the variations
1095:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   *               in voltage and temperature.
1096:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   * @note     (**) HSE_VALUE is a constant defined in stm32l4xx_hal_conf.h file (default value
1097:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   *                8 MHz), user has to ensure that HSE_VALUE is same as the real
1098:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   *                frequency of the crystal used. Otherwise, this function may
1099:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   *                have wrong result.
1100:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   *
1101:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   * @note   The result of this function could be not correct when using fractional
1102:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   *         value for HSE crystal.
1103:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   *
1104:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   * @note   This function can be used by the user application to compute the
1105:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   *         baudrate for the communication peripherals or configure other parameters.
1106:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   *
1107:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   * @note   Each time SYSCLK changes, this function must be called to update the
1108:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   *         right SYSCLK value. Otherwise, any configuration based on this function will be incorre
1109:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   *
1110:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   *
1111:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   * @retval SYSCLK frequency
1112:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   */
1113:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** uint32_t HAL_RCC_GetSysClockFreq(void)
1114:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** {
 1660              		.loc 1 1114 0
 1661              		.cfi_startproc
 1662              		@ args = 0, pretend = 0, frame = 80
 1663              		@ frame_needed = 1, uses_anonymous_args = 0
 1664              		@ link register save eliminated.
 1665 0000 80B4     		push	{r7}
 1666              	.LCFI19:
 1667              		.cfi_def_cfa_offset 4
 1668              		.cfi_offset 7, -4
 1669 0002 95B0     		sub	sp, sp, #84
 1670              	.LCFI20:
 1671              		.cfi_def_cfa_offset 88
 1672 0004 00AF     		add	r7, sp, #0
 1673              	.LCFI21:
 1674              		.cfi_def_cfa_register 7
1115:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 1675              		.loc 1 1115 0
 1676 0006 0023     		movs	r3, #0
 1677 0008 FB64     		str	r3, [r7, #76]
 1678 000a 0023     		movs	r3, #0
 1679 000c BB64     		str	r3, [r7, #72]
 1680 000e 0023     		movs	r3, #0
 1681 0010 3B64     		str	r3, [r7, #64]
 1682 0012 0223     		movs	r3, #2
 1683 0014 FB63     		str	r3, [r7, #60]
 1684 0016 0223     		movs	r3, #2
 1685 0018 BB63     		str	r3, [r7, #56]
1116:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   uint32_t sysclockfreq = 0U;
 1686              		.loc 1 1116 0
ARM GAS  /tmp/ccWowvEN.s 			page 60


 1687 001a 0023     		movs	r3, #0
 1688 001c 7B64     		str	r3, [r7, #68]
1117:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
1118:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 1689              		.loc 1 1118 0
 1690 001e 714B     		ldr	r3, .L133
 1691 0020 9B68     		ldr	r3, [r3, #8]
 1692 0022 03F00C03 		and	r3, r3, #12
 1693 0026 002B     		cmp	r3, #0
 1694 0028 0BD0     		beq	.L112
1119:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_
 1695              		.loc 1 1119 0 discriminator 1
 1696 002a 6E4B     		ldr	r3, .L133
 1697 002c 9B68     		ldr	r3, [r3, #8]
 1698 002e 03F00C03 		and	r3, r3, #12
1118:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_
 1699              		.loc 1 1118 0 discriminator 1
 1700 0032 0C2B     		cmp	r3, #12
 1701 0034 3CD1     		bne	.L113
 1702              		.loc 1 1119 0
 1703 0036 6B4B     		ldr	r3, .L133
 1704 0038 DB68     		ldr	r3, [r3, #12]
 1705 003a 03F00303 		and	r3, r3, #3
 1706 003e 012B     		cmp	r3, #1
 1707 0040 36D1     		bne	.L113
 1708              	.L112:
1120:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   {
1121:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     /* MSI or PLL with MSI source used as system clock source */
1122:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
1123:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     /* Get SYSCLK source */
1124:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 1709              		.loc 1 1124 0
 1710 0042 684B     		ldr	r3, .L133
 1711 0044 1B68     		ldr	r3, [r3]
 1712 0046 03F00803 		and	r3, r3, #8
 1713 004a 002B     		cmp	r3, #0
 1714 004c 12D1     		bne	.L114
1125:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     { /* MSISRANGE from RCC_CSR applies */
1126:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> POSITION_VAL(RCC_CSR_MSISRANGE);
 1715              		.loc 1 1126 0
 1716 004e 654B     		ldr	r3, .L133
 1717 0050 D3F89430 		ldr	r3, [r3, #148]
 1718 0054 03F47062 		and	r2, r3, #3840
 1719 0058 4FF47063 		mov	r3, #3840
 1720 005c 7B63     		str	r3, [r7, #52]
 1721              	.LBB57:
 1722              	.LBB58:
 531:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 1723              		.loc 2 531 0
 1724 005e 7B6B     		ldr	r3, [r7, #52]
 1725              		.syntax unified
 1726              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1727 0060 93FAA3F3 		rbit r3, r3
 1728              	@ 0 "" 2
 1729              		.thumb
 1730              		.syntax unified
 1731 0064 3B63     		str	r3, [r7, #48]
ARM GAS  /tmp/ccWowvEN.s 			page 61


 1732              		.loc 2 544 0
 1733 0066 3B6B     		ldr	r3, [r7, #48]
 1734              	.LBE58:
 1735              	.LBE57:
 1736              		.loc 1 1126 0
 1737 0068 B3FA83F3 		clz	r3, r3
 1738 006c 22FA03F3 		lsr	r3, r2, r3
 1739 0070 FB64     		str	r3, [r7, #76]
 1740 0072 0FE0     		b	.L116
 1741              	.L114:
1127:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     }
1128:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     else
1129:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     { /* MSIRANGE from RCC_CR applies */
1130:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       msirange = (RCC->CR & RCC_CR_MSIRANGE) >> POSITION_VAL(RCC_CR_MSIRANGE);
 1742              		.loc 1 1130 0
 1743 0074 5B4B     		ldr	r3, .L133
 1744 0076 1B68     		ldr	r3, [r3]
 1745 0078 03F0F002 		and	r2, r3, #240
 1746 007c F023     		movs	r3, #240
 1747 007e FB62     		str	r3, [r7, #44]
 1748              	.LBB59:
 1749              	.LBB60:
 531:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 1750              		.loc 2 531 0
 1751 0080 FB6A     		ldr	r3, [r7, #44]
 1752              		.syntax unified
 1753              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1754 0082 93FAA3F3 		rbit r3, r3
 1755              	@ 0 "" 2
 1756              		.thumb
 1757              		.syntax unified
 1758 0086 BB62     		str	r3, [r7, #40]
 1759              		.loc 2 544 0
 1760 0088 BB6A     		ldr	r3, [r7, #40]
 1761              	.LBE60:
 1762              	.LBE59:
 1763              		.loc 1 1130 0
 1764 008a B3FA83F3 		clz	r3, r3
 1765 008e 22FA03F3 		lsr	r3, r2, r3
 1766 0092 FB64     		str	r3, [r7, #76]
 1767              	.L116:
1131:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     }
1132:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     /*MSI frequency range in HZ*/
1133:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     msirange = MSIRangeTable[msirange];
 1768              		.loc 1 1133 0
 1769 0094 544A     		ldr	r2, .L133+4
 1770 0096 FB6C     		ldr	r3, [r7, #76]
 1771 0098 52F82330 		ldr	r3, [r2, r3, lsl #2]
 1772 009c FB64     		str	r3, [r7, #76]
1134:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
1135:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI)
 1773              		.loc 1 1135 0
 1774 009e 514B     		ldr	r3, .L133
 1775 00a0 9B68     		ldr	r3, [r3, #8]
 1776 00a2 03F00C03 		and	r3, r3, #12
 1777 00a6 002B     		cmp	r3, #0
 1778 00a8 13D1     		bne	.L119
ARM GAS  /tmp/ccWowvEN.s 			page 62


1136:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     {
1137:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       /* MSI used as system clock source */
1138:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       sysclockfreq = msirange;
 1779              		.loc 1 1138 0
 1780 00aa FB6C     		ldr	r3, [r7, #76]
 1781 00ac 7B64     		str	r3, [r7, #68]
1135:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     {
 1782              		.loc 1 1135 0
 1783 00ae 10E0     		b	.L119
 1784              	.L113:
1139:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     }
1140:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   }
1141:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 1785              		.loc 1 1141 0
 1786 00b0 4C4B     		ldr	r3, .L133
 1787 00b2 9B68     		ldr	r3, [r3, #8]
 1788 00b4 03F00C03 		and	r3, r3, #12
 1789 00b8 042B     		cmp	r3, #4
 1790 00ba 02D1     		bne	.L120
1142:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   {
1143:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     /* HSI used as system clock source */
1144:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     sysclockfreq = HSI_VALUE;
 1791              		.loc 1 1144 0
 1792 00bc 4B4B     		ldr	r3, .L133+8
 1793 00be 7B64     		str	r3, [r7, #68]
 1794 00c0 07E0     		b	.L119
 1795              	.L120:
1145:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   }
1146:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 1796              		.loc 1 1146 0
 1797 00c2 484B     		ldr	r3, .L133
 1798 00c4 9B68     		ldr	r3, [r3, #8]
 1799 00c6 03F00C03 		and	r3, r3, #12
 1800 00ca 082B     		cmp	r3, #8
 1801 00cc 01D1     		bne	.L119
1147:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   {
1148:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     /* HSE used as system clock source */
1149:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     sysclockfreq = HSE_VALUE;
 1802              		.loc 1 1149 0
 1803 00ce 484B     		ldr	r3, .L133+12
 1804 00d0 7B64     		str	r3, [r7, #68]
 1805              	.L119:
1150:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   }
1151:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
1152:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 1806              		.loc 1 1152 0
 1807 00d2 444B     		ldr	r3, .L133
 1808 00d4 9B68     		ldr	r3, [r3, #8]
 1809 00d6 03F00C03 		and	r3, r3, #12
 1810 00da 0C2B     		cmp	r3, #12
 1811 00dc 7BD1     		bne	.L121
1153:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   {
1154:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     /* PLL used as system clock  source */
1155:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
1156:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
1157:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     SYSCLK = PLL_VCO / PLLR
1158:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     */
ARM GAS  /tmp/ccWowvEN.s 			page 63


1159:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 1812              		.loc 1 1159 0
 1813 00de 414B     		ldr	r3, .L133
 1814 00e0 DB68     		ldr	r3, [r3, #12]
 1815 00e2 03F00303 		and	r3, r3, #3
 1816 00e6 3B64     		str	r3, [r7, #64]
1160:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> POSITION_VAL(RCC_PLLCFGR_PLLM)) + 1U ;
 1817              		.loc 1 1160 0
 1818 00e8 3E4B     		ldr	r3, .L133
 1819 00ea DB68     		ldr	r3, [r3, #12]
 1820 00ec 03F07002 		and	r2, r3, #112
 1821 00f0 7023     		movs	r3, #112
 1822 00f2 7B62     		str	r3, [r7, #36]
 1823              	.LBB61:
 1824              	.LBB62:
 531:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 1825              		.loc 2 531 0
 1826 00f4 7B6A     		ldr	r3, [r7, #36]
 1827              		.syntax unified
 1828              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1829 00f6 93FAA3F3 		rbit r3, r3
 1830              	@ 0 "" 2
 1831              		.thumb
 1832              		.syntax unified
 1833 00fa 3B62     		str	r3, [r7, #32]
 1834              		.loc 2 544 0
 1835 00fc 3B6A     		ldr	r3, [r7, #32]
 1836              	.LBE62:
 1837              	.LBE61:
 1838              		.loc 1 1160 0
 1839 00fe B3FA83F3 		clz	r3, r3
 1840 0102 22FA03F3 		lsr	r3, r2, r3
 1841 0106 0133     		adds	r3, r3, #1
 1842 0108 BB63     		str	r3, [r7, #56]
1161:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
1162:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     switch (pllsource)
 1843              		.loc 1 1162 0
 1844 010a 3B6C     		ldr	r3, [r7, #64]
 1845 010c 022B     		cmp	r3, #2
 1846 010e 02D0     		beq	.L124
 1847 0110 032B     		cmp	r3, #3
 1848 0112 18D0     		beq	.L125
 1849 0114 2FE0     		b	.L132
 1850              	.L124:
1163:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     {
1164:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
1165:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_
 1851              		.loc 1 1165 0
 1852 0116 354A     		ldr	r2, .L133+8
 1853 0118 BB6B     		ldr	r3, [r7, #56]
 1854 011a B2FBF3F3 		udiv	r3, r2, r3
 1855 011e 314A     		ldr	r2, .L133
 1856 0120 D268     		ldr	r2, [r2, #12]
 1857 0122 02F4FE41 		and	r1, r2, #32512
 1858 0126 4FF4FE42 		mov	r2, #32512
 1859 012a FA61     		str	r2, [r7, #28]
 1860              	.LBB63:
ARM GAS  /tmp/ccWowvEN.s 			page 64


 1861              	.LBB64:
 531:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 1862              		.loc 2 531 0
 1863 012c FA69     		ldr	r2, [r7, #28]
 1864              		.syntax unified
 1865              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1866 012e 92FAA2F2 		rbit r2, r2
 1867              	@ 0 "" 2
 1868              		.thumb
 1869              		.syntax unified
 1870 0132 BA61     		str	r2, [r7, #24]
 1871              		.loc 2 544 0
 1872 0134 BA69     		ldr	r2, [r7, #24]
 1873              	.LBE64:
 1874              	.LBE63:
 1875              		.loc 1 1165 0
 1876 0136 B2FA82F2 		clz	r2, r2
 1877 013a 21FA02F2 		lsr	r2, r1, r2
 1878 013e 02FB03F3 		mul	r3, r2, r3
 1879 0142 BB64     		str	r3, [r7, #72]
1166:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       break;
 1880              		.loc 1 1166 0
 1881 0144 2FE0     		b	.L127
 1882              	.L125:
1167:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
1168:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
1169:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_
 1883              		.loc 1 1169 0
 1884 0146 2A4A     		ldr	r2, .L133+12
 1885 0148 BB6B     		ldr	r3, [r7, #56]
 1886 014a B2FBF3F3 		udiv	r3, r2, r3
 1887 014e 254A     		ldr	r2, .L133
 1888 0150 D268     		ldr	r2, [r2, #12]
 1889 0152 02F4FE41 		and	r1, r2, #32512
 1890 0156 4FF4FE42 		mov	r2, #32512
 1891 015a 7A61     		str	r2, [r7, #20]
 1892              	.LBB65:
 1893              	.LBB66:
 531:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 1894              		.loc 2 531 0
 1895 015c 7A69     		ldr	r2, [r7, #20]
 1896              		.syntax unified
 1897              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1898 015e 92FAA2F2 		rbit r2, r2
 1899              	@ 0 "" 2
 1900              		.thumb
 1901              		.syntax unified
 1902 0162 3A61     		str	r2, [r7, #16]
 1903              		.loc 2 544 0
 1904 0164 3A69     		ldr	r2, [r7, #16]
 1905              	.LBE66:
 1906              	.LBE65:
 1907              		.loc 1 1169 0
 1908 0166 B2FA82F2 		clz	r2, r2
 1909 016a 21FA02F2 		lsr	r2, r1, r2
 1910 016e 02FB03F3 		mul	r3, r2, r3
 1911 0172 BB64     		str	r3, [r7, #72]
ARM GAS  /tmp/ccWowvEN.s 			page 65


1170:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       break;
 1912              		.loc 1 1170 0
 1913 0174 17E0     		b	.L127
 1914              	.L132:
1171:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
1172:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
1173:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     default:
1174:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_P
 1915              		.loc 1 1174 0
 1916 0176 FA6C     		ldr	r2, [r7, #76]
 1917 0178 BB6B     		ldr	r3, [r7, #56]
 1918 017a B2FBF3F3 		udiv	r3, r2, r3
 1919 017e 194A     		ldr	r2, .L133
 1920 0180 D268     		ldr	r2, [r2, #12]
 1921 0182 02F4FE41 		and	r1, r2, #32512
 1922 0186 4FF4FE42 		mov	r2, #32512
 1923 018a FA60     		str	r2, [r7, #12]
 1924              	.LBB67:
 1925              	.LBB68:
 531:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 1926              		.loc 2 531 0
 1927 018c FA68     		ldr	r2, [r7, #12]
 1928              		.syntax unified
 1929              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1930 018e 92FAA2F2 		rbit r2, r2
 1931              	@ 0 "" 2
 1932              		.thumb
 1933              		.syntax unified
 1934 0192 BA60     		str	r2, [r7, #8]
 1935              		.loc 2 544 0
 1936 0194 BA68     		ldr	r2, [r7, #8]
 1937              	.LBE68:
 1938              	.LBE67:
 1939              		.loc 1 1174 0
 1940 0196 B2FA82F2 		clz	r2, r2
 1941 019a 21FA02F2 		lsr	r2, r1, r2
 1942 019e 02FB03F3 		mul	r3, r2, r3
 1943 01a2 BB64     		str	r3, [r7, #72]
1175:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       break;
 1944              		.loc 1 1175 0
 1945 01a4 00BF     		nop
 1946              	.L127:
1176:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     }
1177:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> POSITION_VAL(RCC_PLLCFGR_PLLR)) + 1U ) * 2U;
 1947              		.loc 1 1177 0
 1948 01a6 0F4B     		ldr	r3, .L133
 1949 01a8 DB68     		ldr	r3, [r3, #12]
 1950 01aa 03F0C062 		and	r2, r3, #100663296
 1951 01ae 4FF0C063 		mov	r3, #100663296
 1952 01b2 7B60     		str	r3, [r7, #4]
 1953              	.LBB69:
 1954              	.LBB70:
 531:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 1955              		.loc 2 531 0
 1956 01b4 7B68     		ldr	r3, [r7, #4]
 1957              		.syntax unified
 1958              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
ARM GAS  /tmp/ccWowvEN.s 			page 66


 1959 01b6 93FAA3F3 		rbit r3, r3
 1960              	@ 0 "" 2
 1961              		.thumb
 1962              		.syntax unified
 1963 01ba 3B60     		str	r3, [r7]
 1964              		.loc 2 544 0
 1965 01bc 3B68     		ldr	r3, [r7]
 1966              	.LBE70:
 1967              	.LBE69:
 1968              		.loc 1 1177 0
 1969 01be B3FA83F3 		clz	r3, r3
 1970 01c2 22FA03F3 		lsr	r3, r2, r3
 1971 01c6 0133     		adds	r3, r3, #1
 1972 01c8 5B00     		lsls	r3, r3, #1
 1973 01ca FB63     		str	r3, [r7, #60]
1178:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     sysclockfreq = pllvco/pllr;
 1974              		.loc 1 1178 0
 1975 01cc BA6C     		ldr	r2, [r7, #72]
 1976 01ce FB6B     		ldr	r3, [r7, #60]
 1977 01d0 B2FBF3F3 		udiv	r3, r2, r3
 1978 01d4 7B64     		str	r3, [r7, #68]
 1979              	.L121:
1179:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   }
1180:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
1181:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   return sysclockfreq;
 1980              		.loc 1 1181 0
 1981 01d6 7B6C     		ldr	r3, [r7, #68]
1182:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** }
 1982              		.loc 1 1182 0
 1983 01d8 1846     		mov	r0, r3
 1984 01da 5437     		adds	r7, r7, #84
 1985              	.LCFI22:
 1986              		.cfi_def_cfa_offset 4
 1987 01dc BD46     		mov	sp, r7
 1988              	.LCFI23:
 1989              		.cfi_def_cfa_register 13
 1990              		@ sp needed
 1991 01de 5DF8047B 		ldr	r7, [sp], #4
 1992              	.LCFI24:
 1993              		.cfi_restore 7
 1994              		.cfi_def_cfa_offset 0
 1995 01e2 7047     		bx	lr
 1996              	.L134:
 1997              		.align	2
 1998              	.L133:
 1999 01e4 00100240 		.word	1073876992
 2000 01e8 00000000 		.word	MSIRangeTable
 2001 01ec 0024F400 		.word	16000000
 2002 01f0 00127A00 		.word	8000000
 2003              		.cfi_endproc
 2004              	.LFE130:
 2006              		.section	.text.HAL_RCC_GetHCLKFreq,"ax",%progbits
 2007              		.align	1
 2008              		.global	HAL_RCC_GetHCLKFreq
 2009              		.syntax unified
 2010              		.thumb
 2011              		.thumb_func
ARM GAS  /tmp/ccWowvEN.s 			page 67


 2012              		.fpu fpv4-sp-d16
 2014              	HAL_RCC_GetHCLKFreq:
 2015              	.LFB131:
1183:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
1184:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** /**
1185:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   * @brief  Return the HCLK frequency.
1186:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   * @note   Each time HCLK changes, this function must be called to update the
1187:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   *         right HCLK value. Otherwise, any configuration based on this function will be incorrect
1188:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   *
1189:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
1190:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   * @retval HCLK frequency in Hz
1191:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   */
1192:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** uint32_t HAL_RCC_GetHCLKFreq(void)
1193:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** {
 2016              		.loc 1 1193 0
 2017              		.cfi_startproc
 2018              		@ args = 0, pretend = 0, frame = 0
 2019              		@ frame_needed = 1, uses_anonymous_args = 0
 2020              		@ link register save eliminated.
 2021 0000 80B4     		push	{r7}
 2022              	.LCFI25:
 2023              		.cfi_def_cfa_offset 4
 2024              		.cfi_offset 7, -4
 2025 0002 00AF     		add	r7, sp, #0
 2026              	.LCFI26:
 2027              		.cfi_def_cfa_register 7
1194:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   return SystemCoreClock;
 2028              		.loc 1 1194 0
 2029 0004 034B     		ldr	r3, .L137
 2030 0006 1B68     		ldr	r3, [r3]
1195:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** }
 2031              		.loc 1 1195 0
 2032 0008 1846     		mov	r0, r3
 2033 000a BD46     		mov	sp, r7
 2034              	.LCFI27:
 2035              		.cfi_def_cfa_register 13
 2036              		@ sp needed
 2037 000c 5DF8047B 		ldr	r7, [sp], #4
 2038              	.LCFI28:
 2039              		.cfi_restore 7
 2040              		.cfi_def_cfa_offset 0
 2041 0010 7047     		bx	lr
 2042              	.L138:
 2043 0012 00BF     		.align	2
 2044              	.L137:
 2045 0014 00000000 		.word	SystemCoreClock
 2046              		.cfi_endproc
 2047              	.LFE131:
 2049              		.section	.text.HAL_RCC_GetPCLK1Freq,"ax",%progbits
 2050              		.align	1
 2051              		.global	HAL_RCC_GetPCLK1Freq
 2052              		.syntax unified
 2053              		.thumb
 2054              		.thumb_func
 2055              		.fpu fpv4-sp-d16
 2057              	HAL_RCC_GetPCLK1Freq:
 2058              	.LFB132:
ARM GAS  /tmp/ccWowvEN.s 			page 68


1196:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
1197:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** /**
1198:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   * @brief  Return the PCLK1 frequency.
1199:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   * @note   Each time PCLK1 changes, this function must be called to update the
1200:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrec
1201:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   * @retval PCLK1 frequency in Hz
1202:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   */
1203:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** uint32_t HAL_RCC_GetPCLK1Freq(void)
1204:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** {
 2059              		.loc 1 1204 0
 2060              		.cfi_startproc
 2061              		@ args = 0, pretend = 0, frame = 8
 2062              		@ frame_needed = 1, uses_anonymous_args = 0
 2063 0000 80B5     		push	{r7, lr}
 2064              	.LCFI29:
 2065              		.cfi_def_cfa_offset 8
 2066              		.cfi_offset 7, -8
 2067              		.cfi_offset 14, -4
 2068 0002 82B0     		sub	sp, sp, #8
 2069              	.LCFI30:
 2070              		.cfi_def_cfa_offset 16
 2071 0004 00AF     		add	r7, sp, #0
 2072              	.LCFI31:
 2073              		.cfi_def_cfa_register 7
1205:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
1206:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CF
 2074              		.loc 1 1206 0
 2075 0006 FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 2076 000a 0146     		mov	r1, r0
 2077 000c 0B4B     		ldr	r3, .L142
 2078 000e 9B68     		ldr	r3, [r3, #8]
 2079 0010 03F4E062 		and	r2, r3, #1792
 2080 0014 4FF4E063 		mov	r3, #1792
 2081 0018 7B60     		str	r3, [r7, #4]
 2082              	.LBB71:
 2083              	.LBB72:
 531:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 2084              		.loc 2 531 0
 2085 001a 7B68     		ldr	r3, [r7, #4]
 2086              		.syntax unified
 2087              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2088 001c 93FAA3F3 		rbit r3, r3
 2089              	@ 0 "" 2
 2090              		.thumb
 2091              		.syntax unified
 2092 0020 3B60     		str	r3, [r7]
 2093              		.loc 2 544 0
 2094 0022 3B68     		ldr	r3, [r7]
 2095              	.LBE72:
 2096              	.LBE71:
 2097              		.loc 1 1206 0
 2098 0024 B3FA83F3 		clz	r3, r3
 2099 0028 22FA03F3 		lsr	r3, r2, r3
 2100 002c 044A     		ldr	r2, .L142+4
 2101 002e D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 2102 0030 21FA03F3 		lsr	r3, r1, r3
1207:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** }
ARM GAS  /tmp/ccWowvEN.s 			page 69


 2103              		.loc 1 1207 0
 2104 0034 1846     		mov	r0, r3
 2105 0036 0837     		adds	r7, r7, #8
 2106              	.LCFI32:
 2107              		.cfi_def_cfa_offset 8
 2108 0038 BD46     		mov	sp, r7
 2109              	.LCFI33:
 2110              		.cfi_def_cfa_register 13
 2111              		@ sp needed
 2112 003a 80BD     		pop	{r7, pc}
 2113              	.L143:
 2114              		.align	2
 2115              	.L142:
 2116 003c 00100240 		.word	1073876992
 2117 0040 00000000 		.word	APBPrescTable
 2118              		.cfi_endproc
 2119              	.LFE132:
 2121              		.section	.text.HAL_RCC_GetPCLK2Freq,"ax",%progbits
 2122              		.align	1
 2123              		.global	HAL_RCC_GetPCLK2Freq
 2124              		.syntax unified
 2125              		.thumb
 2126              		.thumb_func
 2127              		.fpu fpv4-sp-d16
 2129              	HAL_RCC_GetPCLK2Freq:
 2130              	.LFB133:
1208:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
1209:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** /**
1210:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   * @brief  Return the PCLK2 frequency.
1211:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   * @note   Each time PCLK2 changes, this function must be called to update the
1212:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrec
1213:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   * @retval PCLK2 frequency in Hz
1214:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   */
1215:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** uint32_t HAL_RCC_GetPCLK2Freq(void)
1216:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** {
 2131              		.loc 1 1216 0
 2132              		.cfi_startproc
 2133              		@ args = 0, pretend = 0, frame = 8
 2134              		@ frame_needed = 1, uses_anonymous_args = 0
 2135 0000 80B5     		push	{r7, lr}
 2136              	.LCFI34:
 2137              		.cfi_def_cfa_offset 8
 2138              		.cfi_offset 7, -8
 2139              		.cfi_offset 14, -4
 2140 0002 82B0     		sub	sp, sp, #8
 2141              	.LCFI35:
 2142              		.cfi_def_cfa_offset 16
 2143 0004 00AF     		add	r7, sp, #0
 2144              	.LCFI36:
 2145              		.cfi_def_cfa_register 7
1217:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
1218:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFG
 2146              		.loc 1 1218 0
 2147 0006 FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 2148 000a 0146     		mov	r1, r0
 2149 000c 0B4B     		ldr	r3, .L147
 2150 000e 9B68     		ldr	r3, [r3, #8]
ARM GAS  /tmp/ccWowvEN.s 			page 70


 2151 0010 03F46052 		and	r2, r3, #14336
 2152 0014 4FF46053 		mov	r3, #14336
 2153 0018 7B60     		str	r3, [r7, #4]
 2154              	.LBB73:
 2155              	.LBB74:
 531:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 2156              		.loc 2 531 0
 2157 001a 7B68     		ldr	r3, [r7, #4]
 2158              		.syntax unified
 2159              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2160 001c 93FAA3F3 		rbit r3, r3
 2161              	@ 0 "" 2
 2162              		.thumb
 2163              		.syntax unified
 2164 0020 3B60     		str	r3, [r7]
 2165              		.loc 2 544 0
 2166 0022 3B68     		ldr	r3, [r7]
 2167              	.LBE74:
 2168              	.LBE73:
 2169              		.loc 1 1218 0
 2170 0024 B3FA83F3 		clz	r3, r3
 2171 0028 22FA03F3 		lsr	r3, r2, r3
 2172 002c 044A     		ldr	r2, .L147+4
 2173 002e D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 2174 0030 21FA03F3 		lsr	r3, r1, r3
1219:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** }
 2175              		.loc 1 1219 0
 2176 0034 1846     		mov	r0, r3
 2177 0036 0837     		adds	r7, r7, #8
 2178              	.LCFI37:
 2179              		.cfi_def_cfa_offset 8
 2180 0038 BD46     		mov	sp, r7
 2181              	.LCFI38:
 2182              		.cfi_def_cfa_register 13
 2183              		@ sp needed
 2184 003a 80BD     		pop	{r7, pc}
 2185              	.L148:
 2186              		.align	2
 2187              	.L147:
 2188 003c 00100240 		.word	1073876992
 2189 0040 00000000 		.word	APBPrescTable
 2190              		.cfi_endproc
 2191              	.LFE133:
 2193              		.section	.text.HAL_RCC_GetOscConfig,"ax",%progbits
 2194              		.align	1
 2195              		.global	HAL_RCC_GetOscConfig
 2196              		.syntax unified
 2197              		.thumb
 2198              		.thumb_func
 2199              		.fpu fpv4-sp-d16
 2201              	HAL_RCC_GetOscConfig:
 2202              	.LFB134:
1220:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
1221:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** /**
1222:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   * @brief  Configure the RCC_OscInitStruct according to the internal
1223:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   *         RCC configuration registers.
1224:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   * @param  RCC_OscInitStruct  pointer to an RCC_OscInitTypeDef structure that
ARM GAS  /tmp/ccWowvEN.s 			page 71


1225:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   *         will be configured.
1226:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   * @retval None
1227:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   */
1228:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** void HAL_RCC_GetOscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
1229:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** {
 2203              		.loc 1 1229 0
 2204              		.cfi_startproc
 2205              		@ args = 0, pretend = 0, frame = 56
 2206              		@ frame_needed = 1, uses_anonymous_args = 0
 2207              		@ link register save eliminated.
 2208 0000 80B4     		push	{r7}
 2209              	.LCFI39:
 2210              		.cfi_def_cfa_offset 4
 2211              		.cfi_offset 7, -4
 2212 0002 8FB0     		sub	sp, sp, #60
 2213              	.LCFI40:
 2214              		.cfi_def_cfa_offset 64
 2215 0004 00AF     		add	r7, sp, #0
 2216              	.LCFI41:
 2217              		.cfi_def_cfa_register 7
 2218 0006 7860     		str	r0, [r7, #4]
1230:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   /* Check the parameters */
1231:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   assert_param(RCC_OscInitStruct != NULL);
1232:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
1233:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   /* Set all possible values for the Oscillator type parameter ---------------*/
1234:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** #if defined(RCC_HSI48_SUPPORT)
1235:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI | RCC_OSCILLA
1236:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****                                       RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_LSI | RCC_OSCILLA
1237:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** #else
1238:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI | RCC_OSCILLA
 2219              		.loc 1 1238 0
 2220 0008 7B68     		ldr	r3, [r7, #4]
 2221 000a 1F22     		movs	r2, #31
 2222 000c 1A60     		str	r2, [r3]
1239:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****                                       RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_LSI;
1240:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** #endif /* RCC_HSI48_SUPPORT */
1241:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
1242:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   /* Get the HSE configuration -----------------------------------------------*/
1243:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   if((RCC->CR & RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
 2223              		.loc 1 1243 0
 2224 000e 7D4B     		ldr	r3, .L173
 2225 0010 1B68     		ldr	r3, [r3]
 2226 0012 03F48023 		and	r3, r3, #262144
 2227 0016 B3F5802F 		cmp	r3, #262144
 2228 001a 04D1     		bne	.L150
1244:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   {
1245:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
 2229              		.loc 1 1245 0
 2230 001c 7B68     		ldr	r3, [r7, #4]
 2231 001e 4FF4A022 		mov	r2, #327680
 2232 0022 5A60     		str	r2, [r3, #4]
 2233 0024 0EE0     		b	.L151
 2234              	.L150:
1246:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   }
1247:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   else if((RCC->CR & RCC_CR_HSEON) == RCC_CR_HSEON)
 2235              		.loc 1 1247 0
 2236 0026 774B     		ldr	r3, .L173
ARM GAS  /tmp/ccWowvEN.s 			page 72


 2237 0028 1B68     		ldr	r3, [r3]
 2238 002a 03F48033 		and	r3, r3, #65536
 2239 002e B3F5803F 		cmp	r3, #65536
 2240 0032 04D1     		bne	.L152
1248:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   {
1249:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     RCC_OscInitStruct->HSEState = RCC_HSE_ON;
 2241              		.loc 1 1249 0
 2242 0034 7B68     		ldr	r3, [r7, #4]
 2243 0036 4FF48032 		mov	r2, #65536
 2244 003a 5A60     		str	r2, [r3, #4]
 2245 003c 02E0     		b	.L151
 2246              	.L152:
1250:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   }
1251:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   else
1252:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   {
1253:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
 2247              		.loc 1 1253 0
 2248 003e 7B68     		ldr	r3, [r7, #4]
 2249 0040 0022     		movs	r2, #0
 2250 0042 5A60     		str	r2, [r3, #4]
 2251              	.L151:
1254:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   }
1255:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
1256:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****    /* Get the MSI configuration -----------------------------------------------*/
1257:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   if((RCC->CR & RCC_CR_MSION) == RCC_CR_MSION)
 2252              		.loc 1 1257 0
 2253 0044 6F4B     		ldr	r3, .L173
 2254 0046 1B68     		ldr	r3, [r3]
 2255 0048 03F00103 		and	r3, r3, #1
 2256 004c 012B     		cmp	r3, #1
 2257 004e 03D1     		bne	.L153
1258:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   {
1259:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     RCC_OscInitStruct->MSIState = RCC_MSI_ON;
 2258              		.loc 1 1259 0
 2259 0050 7B68     		ldr	r3, [r7, #4]
 2260 0052 0122     		movs	r2, #1
 2261 0054 9A61     		str	r2, [r3, #24]
 2262 0056 02E0     		b	.L154
 2263              	.L153:
1260:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   }
1261:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   else
1262:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   {
1263:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     RCC_OscInitStruct->MSIState = RCC_MSI_OFF;
 2264              		.loc 1 1263 0
 2265 0058 7B68     		ldr	r3, [r7, #4]
 2266 005a 0022     		movs	r2, #0
 2267 005c 9A61     		str	r2, [r3, #24]
 2268              	.L154:
1264:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   }
1265:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
1266:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   RCC_OscInitStruct->MSICalibrationValue = (uint32_t)((RCC->CR & RCC_ICSCR_MSITRIM) >> POSITION_VAL
 2269              		.loc 1 1266 0
 2270 005e 694B     		ldr	r3, .L173
 2271 0060 1B68     		ldr	r3, [r3]
 2272 0062 03F47F42 		and	r2, r3, #65280
 2273 0066 4FF47F43 		mov	r3, #65280
 2274 006a 7B63     		str	r3, [r7, #52]
ARM GAS  /tmp/ccWowvEN.s 			page 73


 2275              	.LBB75:
 2276              	.LBB76:
 531:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 2277              		.loc 2 531 0
 2278 006c 7B6B     		ldr	r3, [r7, #52]
 2279              		.syntax unified
 2280              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2281 006e 93FAA3F3 		rbit r3, r3
 2282              	@ 0 "" 2
 2283              		.thumb
 2284              		.syntax unified
 2285 0072 3B63     		str	r3, [r7, #48]
 2286              		.loc 2 544 0
 2287 0074 3B6B     		ldr	r3, [r7, #48]
 2288              	.LBE76:
 2289              	.LBE75:
 2290              		.loc 1 1266 0
 2291 0076 B3FA83F3 		clz	r3, r3
 2292 007a DA40     		lsrs	r2, r2, r3
 2293 007c 7B68     		ldr	r3, [r7, #4]
 2294 007e DA61     		str	r2, [r3, #28]
1267:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   RCC_OscInitStruct->MSIClockRange = (uint32_t)((RCC->CR & RCC_CR_MSIRANGE) );
 2295              		.loc 1 1267 0
 2296 0080 604B     		ldr	r3, .L173
 2297 0082 1B68     		ldr	r3, [r3]
 2298 0084 03F0F002 		and	r2, r3, #240
 2299 0088 7B68     		ldr	r3, [r7, #4]
 2300 008a 1A62     		str	r2, [r3, #32]
1268:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
1269:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   /* Get the HSI configuration -----------------------------------------------*/
1270:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   if((RCC->CR & RCC_CR_HSION) == RCC_CR_HSION)
 2301              		.loc 1 1270 0
 2302 008c 5D4B     		ldr	r3, .L173
 2303 008e 1B68     		ldr	r3, [r3]
 2304 0090 03F48073 		and	r3, r3, #256
 2305 0094 B3F5807F 		cmp	r3, #256
 2306 0098 04D1     		bne	.L156
1271:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   {
1272:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     RCC_OscInitStruct->HSIState = RCC_HSI_ON;
 2307              		.loc 1 1272 0
 2308 009a 7B68     		ldr	r3, [r7, #4]
 2309 009c 4FF48072 		mov	r2, #256
 2310 00a0 DA60     		str	r2, [r3, #12]
 2311 00a2 02E0     		b	.L157
 2312              	.L156:
1273:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   }
1274:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   else
1275:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   {
1276:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     RCC_OscInitStruct->HSIState = RCC_HSI_OFF;
 2313              		.loc 1 1276 0
 2314 00a4 7B68     		ldr	r3, [r7, #4]
 2315 00a6 0022     		movs	r2, #0
 2316 00a8 DA60     		str	r2, [r3, #12]
 2317              	.L157:
1277:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   }
1278:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
1279:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   RCC_OscInitStruct->HSICalibrationValue = (uint32_t)((RCC->ICSCR & RCC_ICSCR_HSITRIM) >> POSITION_
ARM GAS  /tmp/ccWowvEN.s 			page 74


 2318              		.loc 1 1279 0
 2319 00aa 564B     		ldr	r3, .L173
 2320 00ac 5B68     		ldr	r3, [r3, #4]
 2321 00ae 03F0F852 		and	r2, r3, #520093696
 2322 00b2 4FF0F853 		mov	r3, #520093696
 2323 00b6 FB62     		str	r3, [r7, #44]
 2324              	.LBB77:
 2325              	.LBB78:
 531:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 2326              		.loc 2 531 0
 2327 00b8 FB6A     		ldr	r3, [r7, #44]
 2328              		.syntax unified
 2329              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2330 00ba 93FAA3F3 		rbit r3, r3
 2331              	@ 0 "" 2
 2332              		.thumb
 2333              		.syntax unified
 2334 00be BB62     		str	r3, [r7, #40]
 2335              		.loc 2 544 0
 2336 00c0 BB6A     		ldr	r3, [r7, #40]
 2337              	.LBE78:
 2338              	.LBE77:
 2339              		.loc 1 1279 0
 2340 00c2 B3FA83F3 		clz	r3, r3
 2341 00c6 DA40     		lsrs	r2, r2, r3
 2342 00c8 7B68     		ldr	r3, [r7, #4]
 2343 00ca 1A61     		str	r2, [r3, #16]
1280:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
1281:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   /* Get the LSE configuration -----------------------------------------------*/
1282:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   if((RCC->BDCR & RCC_BDCR_LSEBYP) == RCC_BDCR_LSEBYP)
 2344              		.loc 1 1282 0
 2345 00cc 4D4B     		ldr	r3, .L173
 2346 00ce D3F89030 		ldr	r3, [r3, #144]
 2347 00d2 03F00403 		and	r3, r3, #4
 2348 00d6 042B     		cmp	r3, #4
 2349 00d8 03D1     		bne	.L159
1283:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   {
1284:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
 2350              		.loc 1 1284 0
 2351 00da 7B68     		ldr	r3, [r7, #4]
 2352 00dc 0522     		movs	r2, #5
 2353 00de 9A60     		str	r2, [r3, #8]
 2354 00e0 0DE0     		b	.L160
 2355              	.L159:
1285:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   }
1286:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   else if((RCC->BDCR & RCC_BDCR_LSEON) == RCC_BDCR_LSEON)
 2356              		.loc 1 1286 0
 2357 00e2 484B     		ldr	r3, .L173
 2358 00e4 D3F89030 		ldr	r3, [r3, #144]
 2359 00e8 03F00103 		and	r3, r3, #1
 2360 00ec 012B     		cmp	r3, #1
 2361 00ee 03D1     		bne	.L161
1287:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   {
1288:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     RCC_OscInitStruct->LSEState = RCC_LSE_ON;
 2362              		.loc 1 1288 0
 2363 00f0 7B68     		ldr	r3, [r7, #4]
 2364 00f2 0122     		movs	r2, #1
ARM GAS  /tmp/ccWowvEN.s 			page 75


 2365 00f4 9A60     		str	r2, [r3, #8]
 2366 00f6 02E0     		b	.L160
 2367              	.L161:
1289:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   }
1290:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   else
1291:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   {
1292:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
 2368              		.loc 1 1292 0
 2369 00f8 7B68     		ldr	r3, [r7, #4]
 2370 00fa 0022     		movs	r2, #0
 2371 00fc 9A60     		str	r2, [r3, #8]
 2372              	.L160:
1293:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   }
1294:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
1295:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   /* Get the LSI configuration -----------------------------------------------*/
1296:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   if((RCC->CSR & RCC_CSR_LSION) == RCC_CSR_LSION)
 2373              		.loc 1 1296 0
 2374 00fe 414B     		ldr	r3, .L173
 2375 0100 D3F89430 		ldr	r3, [r3, #148]
 2376 0104 03F00103 		and	r3, r3, #1
 2377 0108 012B     		cmp	r3, #1
 2378 010a 03D1     		bne	.L162
1297:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   {
1298:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     RCC_OscInitStruct->LSIState = RCC_LSI_ON;
 2379              		.loc 1 1298 0
 2380 010c 7B68     		ldr	r3, [r7, #4]
 2381 010e 0122     		movs	r2, #1
 2382 0110 5A61     		str	r2, [r3, #20]
 2383 0112 02E0     		b	.L163
 2384              	.L162:
1299:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   }
1300:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   else
1301:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   {
1302:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     RCC_OscInitStruct->LSIState = RCC_LSI_OFF;
 2385              		.loc 1 1302 0
 2386 0114 7B68     		ldr	r3, [r7, #4]
 2387 0116 0022     		movs	r2, #0
 2388 0118 5A61     		str	r2, [r3, #20]
 2389              	.L163:
1303:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   }
1304:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
1305:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** #if defined(RCC_HSI48_SUPPORT)
1306:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   /* Get the HSI48 configuration ---------------------------------------------*/
1307:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   if((RCC->CRRCR & RCC_CRRCR_HSI48ON) == RCC_CRRCR_HSI48ON)
1308:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   {
1309:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     RCC_OscInitStruct->HSI48State = RCC_HSI48_ON;
1310:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   }
1311:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   else
1312:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   {
1313:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     RCC_OscInitStruct->HSI48State = RCC_HSI48_OFF;
1314:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   }
1315:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** #else
1316:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   RCC_OscInitStruct->HSI48State = RCC_HSI48_OFF;
 2390              		.loc 1 1316 0
 2391 011a 7B68     		ldr	r3, [r7, #4]
 2392 011c 0022     		movs	r2, #0
 2393 011e 5A62     		str	r2, [r3, #36]
ARM GAS  /tmp/ccWowvEN.s 			page 76


1317:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** #endif /* RCC_HSI48_SUPPORT */
1318:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
1319:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   /* Get the PLL configuration -----------------------------------------------*/
1320:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   if((RCC->CR & RCC_CR_PLLON) == RCC_CR_PLLON)
 2394              		.loc 1 1320 0
 2395 0120 384B     		ldr	r3, .L173
 2396 0122 1B68     		ldr	r3, [r3]
 2397 0124 03F08073 		and	r3, r3, #16777216
 2398 0128 B3F1807F 		cmp	r3, #16777216
 2399 012c 03D1     		bne	.L164
1321:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   {
1322:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
 2400              		.loc 1 1322 0
 2401 012e 7B68     		ldr	r3, [r7, #4]
 2402 0130 0222     		movs	r2, #2
 2403 0132 9A62     		str	r2, [r3, #40]
 2404 0134 02E0     		b	.L165
 2405              	.L164:
1323:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   }
1324:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   else
1325:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   {
1326:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     RCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
 2406              		.loc 1 1326 0
 2407 0136 7B68     		ldr	r3, [r7, #4]
 2408 0138 0122     		movs	r2, #1
 2409 013a 9A62     		str	r2, [r3, #40]
 2410              	.L165:
1327:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   }
1328:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   RCC_OscInitStruct->PLL.PLLSource = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 2411              		.loc 1 1328 0
 2412 013c 314B     		ldr	r3, .L173
 2413 013e DB68     		ldr	r3, [r3, #12]
 2414 0140 03F00302 		and	r2, r3, #3
 2415 0144 7B68     		ldr	r3, [r7, #4]
 2416 0146 DA62     		str	r2, [r3, #44]
1329:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   RCC_OscInitStruct->PLL.PLLM = (uint32_t)(((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> POSITION_VAL(RCC_P
 2417              		.loc 1 1329 0
 2418 0148 2E4B     		ldr	r3, .L173
 2419 014a DB68     		ldr	r3, [r3, #12]
 2420 014c 03F07002 		and	r2, r3, #112
 2421 0150 7023     		movs	r3, #112
 2422 0152 FB60     		str	r3, [r7, #12]
 2423              	.LBB79:
 2424              	.LBB80:
 531:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 2425              		.loc 2 531 0
 2426 0154 FB68     		ldr	r3, [r7, #12]
 2427              		.syntax unified
 2428              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2429 0156 93FAA3F3 		rbit r3, r3
 2430              	@ 0 "" 2
 2431              		.thumb
 2432              		.syntax unified
 2433 015a BB60     		str	r3, [r7, #8]
 2434              		.loc 2 544 0
 2435 015c BB68     		ldr	r3, [r7, #8]
 2436              	.LBE80:
ARM GAS  /tmp/ccWowvEN.s 			page 77


 2437              	.LBE79:
 2438              		.loc 1 1329 0
 2439 015e B3FA83F3 		clz	r3, r3
 2440 0162 22FA03F3 		lsr	r3, r2, r3
 2441 0166 5A1C     		adds	r2, r3, #1
 2442 0168 7B68     		ldr	r3, [r7, #4]
 2443 016a 1A63     		str	r2, [r3, #48]
1330:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   RCC_OscInitStruct->PLL.PLLN = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PL
 2444              		.loc 1 1330 0
 2445 016c 254B     		ldr	r3, .L173
 2446 016e DB68     		ldr	r3, [r3, #12]
 2447 0170 03F4FE42 		and	r2, r3, #32512
 2448 0174 4FF4FE43 		mov	r3, #32512
 2449 0178 7B61     		str	r3, [r7, #20]
 2450              	.LBB81:
 2451              	.LBB82:
 531:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 2452              		.loc 2 531 0
 2453 017a 7B69     		ldr	r3, [r7, #20]
 2454              		.syntax unified
 2455              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2456 017c 93FAA3F3 		rbit r3, r3
 2457              	@ 0 "" 2
 2458              		.thumb
 2459              		.syntax unified
 2460 0180 3B61     		str	r3, [r7, #16]
 2461              		.loc 2 544 0
 2462 0182 3B69     		ldr	r3, [r7, #16]
 2463              	.LBE82:
 2464              	.LBE81:
 2465              		.loc 1 1330 0
 2466 0184 B3FA83F3 		clz	r3, r3
 2467 0188 DA40     		lsrs	r2, r2, r3
 2468 018a 7B68     		ldr	r3, [r7, #4]
 2469 018c 5A63     		str	r2, [r3, #52]
1331:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   RCC_OscInitStruct->PLL.PLLQ = (uint32_t)((((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) >> POSITION_VAL(RCC_
 2470              		.loc 1 1331 0
 2471 018e 1D4B     		ldr	r3, .L173
 2472 0190 DB68     		ldr	r3, [r3, #12]
 2473 0192 03F4C002 		and	r2, r3, #6291456
 2474 0196 4FF4C003 		mov	r3, #6291456
 2475 019a FB61     		str	r3, [r7, #28]
 2476              	.LBB83:
 2477              	.LBB84:
 531:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 2478              		.loc 2 531 0
 2479 019c FB69     		ldr	r3, [r7, #28]
 2480              		.syntax unified
 2481              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2482 019e 93FAA3F3 		rbit r3, r3
 2483              	@ 0 "" 2
 2484              		.thumb
 2485              		.syntax unified
 2486 01a2 BB61     		str	r3, [r7, #24]
 2487              		.loc 2 544 0
 2488 01a4 BB69     		ldr	r3, [r7, #24]
 2489              	.LBE84:
ARM GAS  /tmp/ccWowvEN.s 			page 78


 2490              	.LBE83:
 2491              		.loc 1 1331 0
 2492 01a6 B3FA83F3 		clz	r3, r3
 2493 01aa 22FA03F3 		lsr	r3, r2, r3
 2494 01ae 0133     		adds	r3, r3, #1
 2495 01b0 5A00     		lsls	r2, r3, #1
 2496 01b2 7B68     		ldr	r3, [r7, #4]
 2497 01b4 DA63     		str	r2, [r3, #60]
1332:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   RCC_OscInitStruct->PLL.PLLR = (uint32_t)((((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> POSITION_VAL(RCC_
 2498              		.loc 1 1332 0
 2499 01b6 134B     		ldr	r3, .L173
 2500 01b8 DB68     		ldr	r3, [r3, #12]
 2501 01ba 03F0C062 		and	r2, r3, #100663296
 2502 01be 4FF0C063 		mov	r3, #100663296
 2503 01c2 7B62     		str	r3, [r7, #36]
 2504              	.LBB85:
 2505              	.LBB86:
 531:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 2506              		.loc 2 531 0
 2507 01c4 7B6A     		ldr	r3, [r7, #36]
 2508              		.syntax unified
 2509              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2510 01c6 93FAA3F3 		rbit r3, r3
 2511              	@ 0 "" 2
 2512              		.thumb
 2513              		.syntax unified
 2514 01ca 3B62     		str	r3, [r7, #32]
 2515              		.loc 2 544 0
 2516 01cc 3B6A     		ldr	r3, [r7, #32]
 2517              	.LBE86:
 2518              	.LBE85:
 2519              		.loc 1 1332 0
 2520 01ce B3FA83F3 		clz	r3, r3
 2521 01d2 22FA03F3 		lsr	r3, r2, r3
 2522 01d6 0133     		adds	r3, r3, #1
 2523 01d8 5A00     		lsls	r2, r3, #1
 2524 01da 7B68     		ldr	r3, [r7, #4]
 2525 01dc 1A64     		str	r2, [r3, #64]
1333:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** #if defined(RCC_PLLP_DIV_2_31_SUPPORT)
1334:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   RCC_OscInitStruct->PLL.PLLP = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLPDIV) >> POSITION_VAL(RCC
1335:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** #else
1336:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   if((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) != RESET)
 2526              		.loc 1 1336 0
 2527 01de 094B     		ldr	r3, .L173
 2528 01e0 DB68     		ldr	r3, [r3, #12]
 2529 01e2 03F40033 		and	r3, r3, #131072
 2530 01e6 002B     		cmp	r3, #0
 2531 01e8 03D0     		beq	.L170
1337:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   {
1338:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     RCC_OscInitStruct->PLL.PLLP = RCC_PLLP_DIV17;
 2532              		.loc 1 1338 0
 2533 01ea 7B68     		ldr	r3, [r7, #4]
 2534 01ec 1122     		movs	r2, #17
 2535 01ee 9A63     		str	r2, [r3, #56]
1339:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   }
1340:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   else
1341:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   {
ARM GAS  /tmp/ccWowvEN.s 			page 79


1342:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     RCC_OscInitStruct->PLL.PLLP = RCC_PLLP_DIV7;
1343:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   }
1344:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** #endif /* RCC_PLLP_DIV_2_31_SUPPORT */
1345:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** }
 2536              		.loc 1 1345 0
 2537 01f0 02E0     		b	.L172
 2538              	.L170:
1342:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   }
 2539              		.loc 1 1342 0
 2540 01f2 7B68     		ldr	r3, [r7, #4]
 2541 01f4 0722     		movs	r2, #7
 2542 01f6 9A63     		str	r2, [r3, #56]
 2543              	.L172:
 2544              		.loc 1 1345 0
 2545 01f8 00BF     		nop
 2546 01fa 3C37     		adds	r7, r7, #60
 2547              	.LCFI42:
 2548              		.cfi_def_cfa_offset 4
 2549 01fc BD46     		mov	sp, r7
 2550              	.LCFI43:
 2551              		.cfi_def_cfa_register 13
 2552              		@ sp needed
 2553 01fe 5DF8047B 		ldr	r7, [sp], #4
 2554              	.LCFI44:
 2555              		.cfi_restore 7
 2556              		.cfi_def_cfa_offset 0
 2557 0202 7047     		bx	lr
 2558              	.L174:
 2559              		.align	2
 2560              	.L173:
 2561 0204 00100240 		.word	1073876992
 2562              		.cfi_endproc
 2563              	.LFE134:
 2565              		.section	.text.HAL_RCC_GetClockConfig,"ax",%progbits
 2566              		.align	1
 2567              		.global	HAL_RCC_GetClockConfig
 2568              		.syntax unified
 2569              		.thumb
 2570              		.thumb_func
 2571              		.fpu fpv4-sp-d16
 2573              	HAL_RCC_GetClockConfig:
 2574              	.LFB135:
1346:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
1347:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** /**
1348:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   * @brief  Configure the RCC_ClkInitStruct according to the internal
1349:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   *         RCC configuration registers.
1350:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   * @param  RCC_ClkInitStruct  pointer to an RCC_ClkInitTypeDef structure that
1351:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   *         will be configured.
1352:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   * @param  pFLatency  Pointer on the Flash Latency.
1353:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   * @retval None
1354:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   */
1355:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
1356:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** {
 2575              		.loc 1 1356 0
 2576              		.cfi_startproc
 2577              		@ args = 0, pretend = 0, frame = 8
 2578              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  /tmp/ccWowvEN.s 			page 80


 2579              		@ link register save eliminated.
 2580 0000 80B4     		push	{r7}
 2581              	.LCFI45:
 2582              		.cfi_def_cfa_offset 4
 2583              		.cfi_offset 7, -4
 2584 0002 83B0     		sub	sp, sp, #12
 2585              	.LCFI46:
 2586              		.cfi_def_cfa_offset 16
 2587 0004 00AF     		add	r7, sp, #0
 2588              	.LCFI47:
 2589              		.cfi_def_cfa_register 7
 2590 0006 7860     		str	r0, [r7, #4]
 2591 0008 3960     		str	r1, [r7]
1357:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   /* Check the parameters */
1358:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   assert_param(RCC_ClkInitStruct != NULL);
1359:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   assert_param(pFLatency != NULL);
1360:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
1361:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   /* Set all possible values for the Clock type parameter --------------------*/
1362:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | 
 2592              		.loc 1 1362 0
 2593 000a 7B68     		ldr	r3, [r7, #4]
 2594 000c 0F22     		movs	r2, #15
 2595 000e 1A60     		str	r2, [r3]
1363:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
1364:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   /* Get the SYSCLK configuration --------------------------------------------*/
1365:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 2596              		.loc 1 1365 0
 2597 0010 124B     		ldr	r3, .L176
 2598 0012 9B68     		ldr	r3, [r3, #8]
 2599 0014 03F00302 		and	r2, r3, #3
 2600 0018 7B68     		ldr	r3, [r7, #4]
 2601 001a 5A60     		str	r2, [r3, #4]
1366:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
1367:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   /* Get the HCLK configuration ----------------------------------------------*/
1368:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 2602              		.loc 1 1368 0
 2603 001c 0F4B     		ldr	r3, .L176
 2604 001e 9B68     		ldr	r3, [r3, #8]
 2605 0020 03F0F002 		and	r2, r3, #240
 2606 0024 7B68     		ldr	r3, [r7, #4]
 2607 0026 9A60     		str	r2, [r3, #8]
1369:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
1370:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   /* Get the APB1 configuration ----------------------------------------------*/
1371:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 2608              		.loc 1 1371 0
 2609 0028 0C4B     		ldr	r3, .L176
 2610 002a 9B68     		ldr	r3, [r3, #8]
 2611 002c 03F4E062 		and	r2, r3, #1792
 2612 0030 7B68     		ldr	r3, [r7, #4]
 2613 0032 DA60     		str	r2, [r3, #12]
1372:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
1373:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   /* Get the APB2 configuration ----------------------------------------------*/
1374:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 2614              		.loc 1 1374 0
 2615 0034 094B     		ldr	r3, .L176
 2616 0036 9B68     		ldr	r3, [r3, #8]
 2617 0038 DB08     		lsrs	r3, r3, #3
ARM GAS  /tmp/ccWowvEN.s 			page 81


 2618 003a 03F4E062 		and	r2, r3, #1792
 2619 003e 7B68     		ldr	r3, [r7, #4]
 2620 0040 1A61     		str	r2, [r3, #16]
1375:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
1376:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   /* Get the Flash Wait State (Latency) configuration ------------------------*/
1377:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 2621              		.loc 1 1377 0
 2622 0042 074B     		ldr	r3, .L176+4
 2623 0044 1B68     		ldr	r3, [r3]
 2624 0046 03F00702 		and	r2, r3, #7
 2625 004a 3B68     		ldr	r3, [r7]
 2626 004c 1A60     		str	r2, [r3]
1378:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** }
 2627              		.loc 1 1378 0
 2628 004e 00BF     		nop
 2629 0050 0C37     		adds	r7, r7, #12
 2630              	.LCFI48:
 2631              		.cfi_def_cfa_offset 4
 2632 0052 BD46     		mov	sp, r7
 2633              	.LCFI49:
 2634              		.cfi_def_cfa_register 13
 2635              		@ sp needed
 2636 0054 5DF8047B 		ldr	r7, [sp], #4
 2637              	.LCFI50:
 2638              		.cfi_restore 7
 2639              		.cfi_def_cfa_offset 0
 2640 0058 7047     		bx	lr
 2641              	.L177:
 2642 005a 00BF     		.align	2
 2643              	.L176:
 2644 005c 00100240 		.word	1073876992
 2645 0060 00200240 		.word	1073881088
 2646              		.cfi_endproc
 2647              	.LFE135:
 2649              		.section	.text.HAL_RCC_EnableCSS,"ax",%progbits
 2650              		.align	1
 2651              		.global	HAL_RCC_EnableCSS
 2652              		.syntax unified
 2653              		.thumb
 2654              		.thumb_func
 2655              		.fpu fpv4-sp-d16
 2657              	HAL_RCC_EnableCSS:
 2658              	.LFB136:
1379:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
1380:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** /**
1381:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   * @brief  Enable the Clock Security System.
1382:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   * @note   If a failure is detected on the HSE oscillator clock, this oscillator
1383:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   *         is automatically disabled and an interrupt is generated to inform the
1384:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   *         software about the failure (Clock Security System Interrupt, CSSI),
1385:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   *         allowing the MCU to perform rescue operations. The CSSI is linked to
1386:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
1387:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   * @note   The Clock Security System can only be cleared by reset.
1388:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   * @retval None
1389:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   */
1390:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** void HAL_RCC_EnableCSS(void)
1391:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** {
 2659              		.loc 1 1391 0
ARM GAS  /tmp/ccWowvEN.s 			page 82


 2660              		.cfi_startproc
 2661              		@ args = 0, pretend = 0, frame = 0
 2662              		@ frame_needed = 1, uses_anonymous_args = 0
 2663              		@ link register save eliminated.
 2664 0000 80B4     		push	{r7}
 2665              	.LCFI51:
 2666              		.cfi_def_cfa_offset 4
 2667              		.cfi_offset 7, -4
 2668 0002 00AF     		add	r7, sp, #0
 2669              	.LCFI52:
 2670              		.cfi_def_cfa_register 7
1392:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 2671              		.loc 1 1392 0
 2672 0004 054A     		ldr	r2, .L179
 2673 0006 054B     		ldr	r3, .L179
 2674 0008 1B68     		ldr	r3, [r3]
 2675 000a 43F40023 		orr	r3, r3, #524288
 2676 000e 1360     		str	r3, [r2]
1393:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** }
 2677              		.loc 1 1393 0
 2678 0010 00BF     		nop
 2679 0012 BD46     		mov	sp, r7
 2680              	.LCFI53:
 2681              		.cfi_def_cfa_register 13
 2682              		@ sp needed
 2683 0014 5DF8047B 		ldr	r7, [sp], #4
 2684              	.LCFI54:
 2685              		.cfi_restore 7
 2686              		.cfi_def_cfa_offset 0
 2687 0018 7047     		bx	lr
 2688              	.L180:
 2689 001a 00BF     		.align	2
 2690              	.L179:
 2691 001c 00100240 		.word	1073876992
 2692              		.cfi_endproc
 2693              	.LFE136:
 2695              		.section	.text.HAL_RCC_NMI_IRQHandler,"ax",%progbits
 2696              		.align	1
 2697              		.global	HAL_RCC_NMI_IRQHandler
 2698              		.syntax unified
 2699              		.thumb
 2700              		.thumb_func
 2701              		.fpu fpv4-sp-d16
 2703              	HAL_RCC_NMI_IRQHandler:
 2704              	.LFB137:
1394:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
1395:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** /**
1396:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   * @brief Handle the RCC Clock Security System interrupt request.
1397:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   * @note This API should be called under the NMI_Handler().
1398:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   * @retval None
1399:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   */
1400:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** void HAL_RCC_NMI_IRQHandler(void)
1401:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** {
 2705              		.loc 1 1401 0
 2706              		.cfi_startproc
 2707              		@ args = 0, pretend = 0, frame = 0
 2708              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  /tmp/ccWowvEN.s 			page 83


 2709 0000 80B5     		push	{r7, lr}
 2710              	.LCFI55:
 2711              		.cfi_def_cfa_offset 8
 2712              		.cfi_offset 7, -8
 2713              		.cfi_offset 14, -4
 2714 0002 00AF     		add	r7, sp, #0
 2715              	.LCFI56:
 2716              		.cfi_def_cfa_register 7
1402:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   /* Check RCC CSSF interrupt flag  */
1403:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 2717              		.loc 1 1403 0
 2718 0004 074B     		ldr	r3, .L184
 2719 0006 DB69     		ldr	r3, [r3, #28]
 2720 0008 03F48073 		and	r3, r3, #256
 2721 000c B3F5807F 		cmp	r3, #256
 2722 0010 05D1     		bne	.L183
1404:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   {
1405:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     /* RCC Clock Security System interrupt user callback */
1406:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     HAL_RCC_CSSCallback();
 2723              		.loc 1 1406 0
 2724 0012 FFF7FEFF 		bl	HAL_RCC_CSSCallback
1407:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
1408:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     /* Clear RCC CSS pending bit */
1409:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 2725              		.loc 1 1409 0
 2726 0016 034B     		ldr	r3, .L184
 2727 0018 4FF48072 		mov	r2, #256
 2728 001c 1A62     		str	r2, [r3, #32]
 2729              	.L183:
1410:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   }
1411:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** }
 2730              		.loc 1 1411 0
 2731 001e 00BF     		nop
 2732 0020 80BD     		pop	{r7, pc}
 2733              	.L185:
 2734 0022 00BF     		.align	2
 2735              	.L184:
 2736 0024 00100240 		.word	1073876992
 2737              		.cfi_endproc
 2738              	.LFE137:
 2740              		.section	.text.HAL_RCC_CSSCallback,"ax",%progbits
 2741              		.align	1
 2742              		.weak	HAL_RCC_CSSCallback
 2743              		.syntax unified
 2744              		.thumb
 2745              		.thumb_func
 2746              		.fpu fpv4-sp-d16
 2748              	HAL_RCC_CSSCallback:
 2749              	.LFB138:
1412:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
1413:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** /**
1414:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   * @brief  RCC Clock Security System interrupt callback.
1415:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   * @retval none
1416:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   */
1417:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** __weak void HAL_RCC_CSSCallback(void)
1418:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** {
 2750              		.loc 1 1418 0
ARM GAS  /tmp/ccWowvEN.s 			page 84


 2751              		.cfi_startproc
 2752              		@ args = 0, pretend = 0, frame = 0
 2753              		@ frame_needed = 1, uses_anonymous_args = 0
 2754              		@ link register save eliminated.
 2755 0000 80B4     		push	{r7}
 2756              	.LCFI57:
 2757              		.cfi_def_cfa_offset 4
 2758              		.cfi_offset 7, -4
 2759 0002 00AF     		add	r7, sp, #0
 2760              	.LCFI58:
 2761              		.cfi_def_cfa_register 7
1419:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   /* NOTE : This function should not be modified, when the callback is needed,
1420:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****             the HAL_RCC_CSSCallback should be implemented in the user file
1421:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****    */
1422:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** }
 2762              		.loc 1 1422 0
 2763 0004 00BF     		nop
 2764 0006 BD46     		mov	sp, r7
 2765              	.LCFI59:
 2766              		.cfi_def_cfa_register 13
 2767              		@ sp needed
 2768 0008 5DF8047B 		ldr	r7, [sp], #4
 2769              	.LCFI60:
 2770              		.cfi_restore 7
 2771              		.cfi_def_cfa_offset 0
 2772 000c 7047     		bx	lr
 2773              		.cfi_endproc
 2774              	.LFE138:
 2776              		.section	.text.RCC_SetFlashLatencyFromMSIRange,"ax",%progbits
 2777              		.align	1
 2778              		.syntax unified
 2779              		.thumb
 2780              		.thumb_func
 2781              		.fpu fpv4-sp-d16
 2783              	RCC_SetFlashLatencyFromMSIRange:
 2784              	.LFB139:
1423:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
1424:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** /**
1425:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   * @}
1426:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   */
1427:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
1428:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** /**
1429:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   * @}
1430:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   */
1431:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** 
1432:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** /* Private function prototypes -----------------------------------------------*/
1433:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** /** @addtogroup RCC_Private_Functions
1434:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   * @{
1435:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   */
1436:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** /**
1437:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   * @brief  Update number of Flash wait states in line with MSI range and current 
1438:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****             voltage range.
1439:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
1440:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   * @retval HAL status
1441:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   */
1442:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
1443:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** {
ARM GAS  /tmp/ccWowvEN.s 			page 85


 2785              		.loc 1 1443 0
 2786              		.cfi_startproc
 2787              		@ args = 0, pretend = 0, frame = 24
 2788              		@ frame_needed = 1, uses_anonymous_args = 0
 2789 0000 80B5     		push	{r7, lr}
 2790              	.LCFI61:
 2791              		.cfi_def_cfa_offset 8
 2792              		.cfi_offset 7, -8
 2793              		.cfi_offset 14, -4
 2794 0002 86B0     		sub	sp, sp, #24
 2795              	.LCFI62:
 2796              		.cfi_def_cfa_offset 32
 2797 0004 00AF     		add	r7, sp, #0
 2798              	.LCFI63:
 2799              		.cfi_def_cfa_register 7
 2800 0006 7860     		str	r0, [r7, #4]
1444:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   uint32_t vos = 0;
 2801              		.loc 1 1444 0
 2802 0008 0023     		movs	r3, #0
 2803 000a 7B61     		str	r3, [r7, #20]
1445:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 2804              		.loc 1 1445 0
 2805 000c 0023     		movs	r3, #0
 2806 000e 3B61     		str	r3, [r7, #16]
1446:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   
1447:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 2807              		.loc 1 1447 0
 2808 0010 2A4B     		ldr	r3, .L198
 2809 0012 9B6D     		ldr	r3, [r3, #88]
 2810 0014 03F08053 		and	r3, r3, #268435456
 2811 0018 002B     		cmp	r3, #0
 2812 001a 03D0     		beq	.L188
1448:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   {
1449:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     vos = HAL_PWREx_GetVoltageRange();
 2813              		.loc 1 1449 0
 2814 001c FFF7FEFF 		bl	HAL_PWREx_GetVoltageRange
 2815 0020 7861     		str	r0, [r7, #20]
 2816 0022 14E0     		b	.L189
 2817              	.L188:
 2818              	.LBB87:
1450:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   }
1451:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   else
1452:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   {
1453:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     __HAL_RCC_PWR_CLK_ENABLE();
 2819              		.loc 1 1453 0
 2820 0024 254A     		ldr	r2, .L198
 2821 0026 254B     		ldr	r3, .L198
 2822 0028 9B6D     		ldr	r3, [r3, #88]
 2823 002a 43F08053 		orr	r3, r3, #268435456
 2824 002e 9365     		str	r3, [r2, #88]
 2825 0030 224B     		ldr	r3, .L198
 2826 0032 9B6D     		ldr	r3, [r3, #88]
 2827 0034 03F08053 		and	r3, r3, #268435456
 2828 0038 FB60     		str	r3, [r7, #12]
 2829 003a FB68     		ldr	r3, [r7, #12]
 2830              	.LBE87:
1454:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     vos = HAL_PWREx_GetVoltageRange();
ARM GAS  /tmp/ccWowvEN.s 			page 86


 2831              		.loc 1 1454 0
 2832 003c FFF7FEFF 		bl	HAL_PWREx_GetVoltageRange
 2833 0040 7861     		str	r0, [r7, #20]
1455:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     __HAL_RCC_PWR_CLK_DISABLE();
 2834              		.loc 1 1455 0
 2835 0042 1E4A     		ldr	r2, .L198
 2836 0044 1D4B     		ldr	r3, .L198
 2837 0046 9B6D     		ldr	r3, [r3, #88]
 2838 0048 23F08053 		bic	r3, r3, #268435456
 2839 004c 9365     		str	r3, [r2, #88]
 2840              	.L189:
1456:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   }
1457:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   
1458:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 2841              		.loc 1 1458 0
 2842 004e 7B69     		ldr	r3, [r7, #20]
 2843 0050 B3F5007F 		cmp	r3, #512
 2844 0054 0BD1     		bne	.L190
1459:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   {
1460:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     if(msirange > RCC_MSIRANGE_8)
 2845              		.loc 1 1460 0
 2846 0056 7B68     		ldr	r3, [r7, #4]
 2847 0058 802B     		cmp	r3, #128
 2848 005a 19D9     		bls	.L193
1461:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     {
1462:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       /* MSI > 16Mhz */
1463:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       if(msirange > RCC_MSIRANGE_10)
 2849              		.loc 1 1463 0
 2850 005c 7B68     		ldr	r3, [r7, #4]
 2851 005e A02B     		cmp	r3, #160
 2852 0060 02D9     		bls	.L192
1464:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       {
1465:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         /* MSI 48Mhz */
1466:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         latency = FLASH_LATENCY_2; /* 2WS */
 2853              		.loc 1 1466 0
 2854 0062 0223     		movs	r3, #2
 2855 0064 3B61     		str	r3, [r7, #16]
 2856 0066 13E0     		b	.L193
 2857              	.L192:
1467:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       }
1468:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       else
1469:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       {
1470:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         /* MSI 24Mhz or 32Mhz */
1471:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         latency = FLASH_LATENCY_1; /* 1WS */
 2858              		.loc 1 1471 0
 2859 0068 0123     		movs	r3, #1
 2860 006a 3B61     		str	r3, [r7, #16]
 2861 006c 10E0     		b	.L193
 2862              	.L190:
1472:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       }
1473:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     }
1474:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
1475:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   }
1476:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   else
1477:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   {
1478:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     if(msirange > RCC_MSIRANGE_8)
 2863              		.loc 1 1478 0
ARM GAS  /tmp/ccWowvEN.s 			page 87


 2864 006e 7B68     		ldr	r3, [r7, #4]
 2865 0070 802B     		cmp	r3, #128
 2866 0072 02D9     		bls	.L194
1479:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     {
1480:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       /* MSI > 16Mhz */
1481:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       latency = FLASH_LATENCY_3; /* 3WS */
 2867              		.loc 1 1481 0
 2868 0074 0323     		movs	r3, #3
 2869 0076 3B61     		str	r3, [r7, #16]
 2870 0078 0AE0     		b	.L193
 2871              	.L194:
1482:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     }
1483:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     else
1484:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     {
1485:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       if(msirange == RCC_MSIRANGE_8)
 2872              		.loc 1 1485 0
 2873 007a 7B68     		ldr	r3, [r7, #4]
 2874 007c 802B     		cmp	r3, #128
 2875 007e 02D1     		bne	.L195
1486:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       {
1487:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         /* MSI 16Mhz */
1488:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         latency = FLASH_LATENCY_2; /* 2WS */
 2876              		.loc 1 1488 0
 2877 0080 0223     		movs	r3, #2
 2878 0082 3B61     		str	r3, [r7, #16]
 2879 0084 04E0     		b	.L193
 2880              	.L195:
1489:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       }
1490:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       else if(msirange == RCC_MSIRANGE_7) 
 2881              		.loc 1 1490 0
 2882 0086 7B68     		ldr	r3, [r7, #4]
 2883 0088 702B     		cmp	r3, #112
 2884 008a 01D1     		bne	.L193
1491:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       {
1492:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         /* MSI 8Mhz */
1493:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****         latency = FLASH_LATENCY_1; /* 1WS */
 2885              		.loc 1 1493 0
 2886 008c 0123     		movs	r3, #1
 2887 008e 3B61     		str	r3, [r7, #16]
 2888              	.L193:
1494:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       }
1495:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****       /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
1496:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     }
1497:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   }
1498:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****        
1499:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   __HAL_FLASH_SET_LATENCY(latency);
 2889              		.loc 1 1499 0
 2890 0090 0B49     		ldr	r1, .L198+4
 2891 0092 0B4B     		ldr	r3, .L198+4
 2892 0094 1B68     		ldr	r3, [r3]
 2893 0096 23F00702 		bic	r2, r3, #7
 2894 009a 3B69     		ldr	r3, [r7, #16]
 2895 009c 1343     		orrs	r3, r3, r2
 2896 009e 0B60     		str	r3, [r1]
1500:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   
1501:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   /* Check that the new number of wait states is taken into account to access the Flash
1502:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****      memory by reading the FLASH_ACR register */
ARM GAS  /tmp/ccWowvEN.s 			page 88


1503:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   if((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 2897              		.loc 1 1503 0
 2898 00a0 074B     		ldr	r3, .L198+4
 2899 00a2 1B68     		ldr	r3, [r3]
 2900 00a4 03F00702 		and	r2, r3, #7
 2901 00a8 3B69     		ldr	r3, [r7, #16]
 2902 00aa 9A42     		cmp	r2, r3
 2903 00ac 01D0     		beq	.L196
1504:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   {
1505:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****     return HAL_ERROR;
 2904              		.loc 1 1505 0
 2905 00ae 0123     		movs	r3, #1
 2906 00b0 00E0     		b	.L197
 2907              	.L196:
1506:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   }
1507:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   
1508:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c ****   return HAL_OK;
 2908              		.loc 1 1508 0
 2909 00b2 0023     		movs	r3, #0
 2910              	.L197:
1509:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c **** }
 2911              		.loc 1 1509 0
 2912 00b4 1846     		mov	r0, r3
 2913 00b6 1837     		adds	r7, r7, #24
 2914              	.LCFI64:
 2915              		.cfi_def_cfa_offset 8
 2916 00b8 BD46     		mov	sp, r7
 2917              	.LCFI65:
 2918              		.cfi_def_cfa_register 13
 2919              		@ sp needed
 2920 00ba 80BD     		pop	{r7, pc}
 2921              	.L199:
 2922              		.align	2
 2923              	.L198:
 2924 00bc 00100240 		.word	1073876992
 2925 00c0 00200240 		.word	1073881088
 2926              		.cfi_endproc
 2927              	.LFE139:
 2929              		.text
 2930              	.Letext0:
 2931              		.file 3 "/usr/arm-none-eabi/include/machine/_default_types.h"
 2932              		.file 4 "/usr/arm-none-eabi/include/sys/_stdint.h"
 2933              		.file 5 "Drivers/CMSIS/Include/core_cm4.h"
 2934              		.file 6 "Drivers/CMSIS/Device/ST/STM32L4xx/Include/system_stm32l4xx.h"
 2935              		.file 7 "Drivers/CMSIS/Device/ST/STM32L4xx/Include/stm32l476xx.h"
 2936              		.file 8 "Drivers/CMSIS/Device/ST/STM32L4xx/Include/stm32l4xx.h"
 2937              		.file 9 "/usr/arm-none-eabi/include/sys/lock.h"
 2938              		.file 10 "/usr/arm-none-eabi/include/sys/_types.h"
 2939              		.file 11 "/usr/lib/gcc/arm-none-eabi/6.2.0/include/stddef.h"
 2940              		.file 12 "/usr/arm-none-eabi/include/sys/reent.h"
 2941              		.file 13 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_def.h"
 2942              		.file 14 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_rcc.h"
 2943              		.file 15 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_gpio.h"
ARM GAS  /tmp/ccWowvEN.s 			page 89


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32l4xx_hal_rcc.c
     /tmp/ccWowvEN.s:18     .text.HAL_RCC_DeInit:0000000000000000 $t
     /tmp/ccWowvEN.s:25     .text.HAL_RCC_DeInit:0000000000000000 HAL_RCC_DeInit
     /tmp/ccWowvEN.s:144    .text.HAL_RCC_DeInit:000000000000009c $d
     /tmp/ccWowvEN.s:152    .text.HAL_RCC_OscConfig:0000000000000000 $t
     /tmp/ccWowvEN.s:159    .text.HAL_RCC_OscConfig:0000000000000000 HAL_RCC_OscConfig
     /tmp/ccWowvEN.s:2783   .text.RCC_SetFlashLatencyFromMSIRange:0000000000000000 RCC_SetFlashLatencyFromMSIRange
     /tmp/ccWowvEN.s:1658   .text.HAL_RCC_GetSysClockFreq:0000000000000000 HAL_RCC_GetSysClockFreq
     /tmp/ccWowvEN.s:552    .text.HAL_RCC_OscConfig:00000000000002a4 $d
     /tmp/ccWowvEN.s:557    .text.HAL_RCC_OscConfig:00000000000002b0 $t
     /tmp/ccWowvEN.s:969    .text.HAL_RCC_OscConfig:0000000000000584 $d
     /tmp/ccWowvEN.s:973    .text.HAL_RCC_OscConfig:000000000000058c $t
     /tmp/ccWowvEN.s:1194   .text.HAL_RCC_OscConfig:0000000000000708 $d
     /tmp/ccWowvEN.s:1199   .text.HAL_RCC_ClockConfig:0000000000000000 $t
     /tmp/ccWowvEN.s:1206   .text.HAL_RCC_ClockConfig:0000000000000000 HAL_RCC_ClockConfig
     /tmp/ccWowvEN.s:1555   .text.HAL_RCC_ClockConfig:0000000000000234 $d
     /tmp/ccWowvEN.s:1563   .text.HAL_RCC_MCOConfig:0000000000000000 $t
     /tmp/ccWowvEN.s:1570   .text.HAL_RCC_MCOConfig:0000000000000000 HAL_RCC_MCOConfig
     /tmp/ccWowvEN.s:1646   .text.HAL_RCC_MCOConfig:0000000000000064 $d
     /tmp/ccWowvEN.s:1651   .text.HAL_RCC_GetSysClockFreq:0000000000000000 $t
     /tmp/ccWowvEN.s:1999   .text.HAL_RCC_GetSysClockFreq:00000000000001e4 $d
     /tmp/ccWowvEN.s:2007   .text.HAL_RCC_GetHCLKFreq:0000000000000000 $t
     /tmp/ccWowvEN.s:2014   .text.HAL_RCC_GetHCLKFreq:0000000000000000 HAL_RCC_GetHCLKFreq
     /tmp/ccWowvEN.s:2045   .text.HAL_RCC_GetHCLKFreq:0000000000000014 $d
     /tmp/ccWowvEN.s:2050   .text.HAL_RCC_GetPCLK1Freq:0000000000000000 $t
     /tmp/ccWowvEN.s:2057   .text.HAL_RCC_GetPCLK1Freq:0000000000000000 HAL_RCC_GetPCLK1Freq
     /tmp/ccWowvEN.s:2116   .text.HAL_RCC_GetPCLK1Freq:000000000000003c $d
     /tmp/ccWowvEN.s:2122   .text.HAL_RCC_GetPCLK2Freq:0000000000000000 $t
     /tmp/ccWowvEN.s:2129   .text.HAL_RCC_GetPCLK2Freq:0000000000000000 HAL_RCC_GetPCLK2Freq
     /tmp/ccWowvEN.s:2188   .text.HAL_RCC_GetPCLK2Freq:000000000000003c $d
     /tmp/ccWowvEN.s:2194   .text.HAL_RCC_GetOscConfig:0000000000000000 $t
     /tmp/ccWowvEN.s:2201   .text.HAL_RCC_GetOscConfig:0000000000000000 HAL_RCC_GetOscConfig
     /tmp/ccWowvEN.s:2561   .text.HAL_RCC_GetOscConfig:0000000000000204 $d
     /tmp/ccWowvEN.s:2566   .text.HAL_RCC_GetClockConfig:0000000000000000 $t
     /tmp/ccWowvEN.s:2573   .text.HAL_RCC_GetClockConfig:0000000000000000 HAL_RCC_GetClockConfig
     /tmp/ccWowvEN.s:2644   .text.HAL_RCC_GetClockConfig:000000000000005c $d
     /tmp/ccWowvEN.s:2650   .text.HAL_RCC_EnableCSS:0000000000000000 $t
     /tmp/ccWowvEN.s:2657   .text.HAL_RCC_EnableCSS:0000000000000000 HAL_RCC_EnableCSS
     /tmp/ccWowvEN.s:2691   .text.HAL_RCC_EnableCSS:000000000000001c $d
     /tmp/ccWowvEN.s:2696   .text.HAL_RCC_NMI_IRQHandler:0000000000000000 $t
     /tmp/ccWowvEN.s:2703   .text.HAL_RCC_NMI_IRQHandler:0000000000000000 HAL_RCC_NMI_IRQHandler
     /tmp/ccWowvEN.s:2748   .text.HAL_RCC_CSSCallback:0000000000000000 HAL_RCC_CSSCallback
     /tmp/ccWowvEN.s:2736   .text.HAL_RCC_NMI_IRQHandler:0000000000000024 $d
     /tmp/ccWowvEN.s:2741   .text.HAL_RCC_CSSCallback:0000000000000000 $t
     /tmp/ccWowvEN.s:2777   .text.RCC_SetFlashLatencyFromMSIRange:0000000000000000 $t
     /tmp/ccWowvEN.s:2924   .text.RCC_SetFlashLatencyFromMSIRange:00000000000000bc $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
SystemCoreClock
HAL_InitTick
HAL_GetTick
AHBPrescTable
HAL_GPIO_Init
MSIRangeTable
APBPrescTable
ARM GAS  /tmp/ccWowvEN.s 			page 90


HAL_PWREx_GetVoltageRange
